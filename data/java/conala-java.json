[
    {
        "question_id": 20389890, 
        "title": "Generating a Random Number between 1 and 10 Java", 
        "annotations": [
            {
                "intent": "Generating a Random Number between 1 and 10 Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "int randomNum = rand.nextInt((max - min) + 1) + min;", 
                "normalized_code_snippet": "int randomNum = rand.nextInt((max - min) + 1) + min;"
            }, 
            {
                "intent": "Generating a Random Number between 1 and 10 Java", 
                "context": "import java.util.Random;\nRandom rn = new Random();", 
                "normalized_context": null, 
                "code_snippet": "int answer = rn.nextInt(10) + 1;", 
                "normalized_code_snippet": "int answer = rn.nextInt(10) + 1;"
            }
        ]
    }, 
    {
        "question_id": 1509391, 
        "title": "how to get the one entry from hashmap without iterating", 
        "annotations": [
            {
                "intent": "", 
                "context": "Map<String, String> map = ...;  // wherever you get this from", 
                "normalized_context": null, 
                "code_snippet": "Map.Entry<String, String> entry = map.entrySet().iterator().next();", 
                "normalized_code_snippet": "Map.Entry<String, String> entry = map.entrySet().iterator().next();"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "for(Map.Entry<String, String> entry : MapObj.entrySet()) {\n    return entry;\n}", 
                "normalized_code_snippet": "for (Map.Entry<String, String> entry : MapObj.entrySet()) {\n    return entry;\n}"
            }, 
            {
                "intent": "", 
                "context": "TreeMap<String, String> myMap = new TreeMap<String, String>();", 
                "normalized_context": "TreeMap<String, String> myMap = new TreeMap<String, String>();", 
                "code_snippet": "String first = myMap.firstEntry().getValue();", 
                "normalized_code_snippet": "String first = myMap.firstEntry().getValue();"
            }, 
            {
                "intent": "", 
                "context": "TreeMap<String, String> myMap = new TreeMap<String, String>();", 
                "normalized_context": "TreeMap<String, String> myMap = new TreeMap<String, String>();", 
                "code_snippet": "String firstOther = myMap.get(myMap.firstKey());", 
                "normalized_code_snippet": "String firstOther = myMap.get(myMap.firstKey());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "return hashMapObject.entrySet().iterator().next();", 
                "normalized_code_snippet": "return hashMapObject.entrySet().iterator().next();"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "return new ArrayList(hashMapObject.entrySet()).get(0);", 
                "normalized_code_snippet": "return new ArrayList(hashMapObject.entrySet()).get(0);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "return hashMapObject.entrySet().toArray()[0];", 
                "normalized_code_snippet": "return hashMapObject.entrySet().toArray()[0];"
            }
        ]
    }, 
    {
        "question_id": 909843, 
        "title": "How to get the unique ID of an object which overrides hashCode()?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public class A {\n    static int UNIQUE_ID = 0;\n    int uid = ++UNIQUE_ID;\n\n    public int hashCode() {\n        return uid;\n    }\n}", 
                "normalized_code_snippet": "public class A {\n\n    static int UNIQUE_ID = 0;\n\n    int uid = ++UNIQUE_ID;\n\n    public int hashCode() {\n        return uid;\n    }\n}"
            }
        ]
    }, 
    {
        "question_id": 1770010, 
        "title": "How do I measure time elapsed in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "long startTime = System.currentTimeMillis();\n// ... do something ...\nlong estimatedTime = System.currentTimeMillis() - startTime;", 
                "normalized_code_snippet": "long startTime = System.currentTimeMillis();\nlong estimatedTime = System.currentTimeMillis() - startTime;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "long startTime = System.nanoTime();    \n// ... the code being measured ...    \nlong estimatedTime = System.nanoTime() - startTime;", 
                "normalized_code_snippet": "long startTime = System.nanoTime();\nlong estimatedTime = System.nanoTime() - startTime;"
            }, 
            {
                "intent": "", 
                "context": "pointcut monitor() : execution(* *.ClassToMonitor.methodToMonitor(..));", 
                "normalized_context": null, 
                "code_snippet": "Monitor monitor = MonitorFactory.start(thisJoinPoint.toShortString());\n        Object returnedObject = proceed();\n        monitor.stop();\n        return returnedObject;", 
                "normalized_code_snippet": "Monitor monitor = MonitorFactory.start(thisJoinPoint.toShortString());\nObject returnedObject = proceed();\nmonitor.stop();\nreturn returnedObject;"
            }, 
            {
                "intent": "", 
                "context": "public class TimeWatch {    \n    long starts;\n\n    public static TimeWatch start() {\n        return new TimeWatch();\n    }\n\n    private TimeWatch() {\n        reset();\n    }\n\n    public TimeWatch reset() {\n        starts = System.currentTimeMillis();\n        return this;\n    }\n\n    public long time() {\n        long ends = System.currentTimeMillis();\n        return ends - starts;\n    }\n\n    public long time(TimeUnit unit) {\n        return unit.convert(time(), TimeUnit.MILLISECONDS);\n    }\n}", 
                "normalized_context": "public class TimeWatch {\n\n    long starts;\n\n    public static TimeWatch start() {\n        return new TimeWatch();\n    }\n\n    private TimeWatch() {\n        reset();\n    }\n\n    public TimeWatch reset() {\n        starts = System.currentTimeMillis();\n        return this;\n    }\n\n    public long time() {\n        long ends = System.currentTimeMillis();\n        return ends - starts;\n    }\n\n    public long time(TimeUnit unit) {\n        return unit.convert(time(), TimeUnit.MILLISECONDS);\n    }\n}", 
                "code_snippet": "TimeWatch watch = TimeWatch.start();\n    // do something\n    long passedTimeInMs = watch.time();", 
                "normalized_code_snippet": "TimeWatch watch = TimeWatch.start();\nlong passedTimeInMs = watch.time();"
            }
        ]
    }, 
    {
        "question_id": 4051887, 
        "title": "How to format a Java string with leading zero?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "(\"00000000\" + \"Apple\").substring(\"Apple\".length())", 
                "normalized_code_snippet": "(\"00000000\" + \"Apple\").substring(\"Apple\".length());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "StringUtils.leftPad(yourString, 8, '0');", 
                "normalized_code_snippet": "StringUtils.leftPad(yourString, 8, '0');"
            }
        ]
    }, 
    {
        "question_id": 320542, 
        "title": "How to get the path of a running JAR file?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "return new File(MyClass.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());", 
                "normalized_code_snippet": "return new File(MyClass.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String path = Test.class.getProtectionDomain().getCodeSource().getLocation().getPath();\nString decodedPath = URLDecoder.decode(path, \"UTF-8\");", 
                "normalized_code_snippet": "String path = Test.class.getProtectionDomain().getCodeSource().getLocation().getPath();\nString decodedPath = URLDecoder.decode(path, \"UTF-8\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "/**\n * Gets the base location of the given class.\n * <p>\n * If the class is directly on the file system (e.g.,\n * \"/path/to/my/package/MyClass.class\") then it will return the base directory\n * (e.g., \"file:/path/to\").\n * </p>\n * <p>\n * If the class is within a JAR file (e.g.,\n * \"/path/to/my-jar.jar!/my/package/MyClass.class\") then it will return the\n * path to the JAR (e.g., \"file:/path/to/my-jar.jar\").\n * </p>\n *\n * @param c The class whose location is desired.\n * @see FileUtils#urlToFile(URL) to convert the result to a {@link File}.\n */\npublic static URL getLocation(final Class<?> c) {\n    if (c == null) return null; // could not load the class\n\n    // try the easy way first\n    try {\n        final URL codeSourceLocation =\n            c.getProtectionDomain().getCodeSource().getLocation();\n        if (codeSourceLocation != null) return codeSourceLocation;\n    }\n    catch (final SecurityException e) {\n        // NB: Cannot access protection domain.\n    }\n    catch (final NullPointerException e) {\n        // NB: Protection domain or code source is null.\n    }\n\n    // NB: The easy way failed, so we try the hard way. We ask for the class\n    // itself as a resource, then strip the class's path from the URL string,\n    // leaving the base path.\n\n    // get the class's raw resource path\n    final URL classResource = c.getResource(c.getSimpleName() + \".class\");\n    if (classResource == null) return null; // cannot find class resource\n\n    final String url = classResource.toString();\n    final String suffix = c.getCanonicalName().replace('.', '/') + \".class\";\n    if (!url.endsWith(suffix)) return null; // weird URL\n\n    // strip the class's path from the URL string\n    final String base = url.substring(0, url.length() - suffix.length());\n\n    String path = base;\n\n    // remove the \"jar:\" prefix and \"!/\" suffix, if present\n    if (path.startsWith(\"jar:\")) path = path.substring(4, path.length() - 2);\n\n    try {\n        return new URL(path);\n    }\n    catch (final MalformedURLException e) {\n        e.printStackTrace();\n        return null;\n    }\n} \n\n", 
                "normalized_code_snippet": "if (c == null)\n    return null;\ntry {\n    final URL codeSourceLocation = c.getProtectionDomain().getCodeSource().getLocation();\n    if (codeSourceLocation != null)\n        return codeSourceLocation;\n} catch (final SecurityException e) {\n} catch (final NullPointerException e) {\n}\nfinal URL classResource = c.getResource(c.getSimpleName() + \".class\");\nif (classResource == null)\n    return null;\nfinal String url = classResource.toString();\nfinal String suffix = c.getCanonicalName().replace('.', '/') + \".class\";\nif (!url.endsWith(suffix))\n    return null;\nfinal String base = url.substring(0, url.length() - suffix.length());\nString path = base;\nif (path.startsWith(\"jar:\"))\n    path = path.substring(4, path.length() - 2);\ntry {\n    return new URL(path);\n} catch (final MalformedURLException e) {\n    e.printStackTrace();\n    return null;\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": " \n\n/**\n * Converts the given {@link URL} to its corresponding {@link File}.\n * <p>\n * This method is similar to calling {@code new File(url.toURI())} except that\n * it also handles \"jar:file:\" URLs, returning the path to the JAR file.\n * </p>\n * \n * @param url The URL to convert.\n * @return A file path suitable for use with e.g. {@link FileInputStream}\n * @throws IllegalArgumentException if the URL does not correspond to a file.\n */\npublic static File urlToFile(final URL url) {\n    return url == null ? null : urlToFile(url.toString());\n}\n\n", 
                "normalized_code_snippet": "return url == null ? null : urlToFile(url.toString());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "\n\n/**\n * Converts the given URL string to its corresponding {@link File}.\n * \n * @param url The URL to convert.\n * @return A file path suitable for use with e.g. {@link FileInputStream}\n * @throws IllegalArgumentException if the URL does not correspond to a file.\n */\npublic static File urlToFile(final String url) {\n    String path = url;\n    if (path.startsWith(\"jar:\")) {\n        // remove \"jar:\" prefix and \"!/\" suffix\n        final int index = path.indexOf(\"!/\");\n        path = path.substring(4, index);\n    }\n    try {\n        if (PlatformUtils.isWindows() && path.matches(\"file:[A-Za-z]:.*\")) {\n            path = \"file:/\" + path.substring(5);\n        }\n        return new File(new URL(path).toURI());\n    }\n    catch (final MalformedURLException e) {\n        // NB: URL is not completely well-formed.\n    }\n    catch (final URISyntaxException e) {\n        // NB: URL is not completely well-formed.\n    }\n    if (path.startsWith(\"file:\")) {\n        // pass through the URL as-is, minus \"file:\" prefix\n        path = path.substring(5);\n        return new File(path);\n    }\n    throw new IllegalArgumentException(\"Invalid URL: \" + url);\n}\n", 
                "normalized_code_snippet": "String path = url;\nif (path.startsWith(\"jar:\")) {\n    final int index = path.indexOf(\"!/\");\n    path = path.substring(4, index);\n}\ntry {\n    if (PlatformUtils.isWindows() && path.matches(\"file:[A-Za-z]:.*\")) {\n        path = \"file:/\" + path.substring(5);\n    }\n    return new File(new URL(path).toURI());\n} catch (final MalformedURLException e) {\n} catch (final URISyntaxException e) {\n}\nif (path.startsWith(\"file:\")) {\n    path = path.substring(5);\n    return new File(path);\n}\nthrow new IllegalArgumentException(\"Invalid URL: \" + url);"
            }
        ]
    }, 
    {
        "question_id": 15039519, 
        "title": "How to dynamically add elements to String array?", 
        "annotations": [
            {
                "intent": "", 
                "context": "ArrayList<String> mylist = new ArrayList<String>();", 
                "normalized_context": "ArrayList<String> mylist = new ArrayList<String>();", 
                "code_snippet": "mylist.add(mystring); //this adds an element to the list.", 
                "normalized_code_snippet": "mylist.add(mystring);"
            }, 
            {
                "intent": "", 
                "context": "ArrayList str = new ArrayList();", 
                "normalized_context": "ArrayList str = new ArrayList();", 
                "code_snippet": "str.add(\"Value1\");", 
                "normalized_code_snippet": "str.add(\"Value1\");"
            }, 
            {
                "intent": "", 
                "context": "ArrayList str = new ArrayList();", 
                "normalized_context": "ArrayList str = new ArrayList();", 
                "code_snippet": "str.add(\"Value1\");", 
                "normalized_code_snippet": "str.add(\"Value1\");"
            }, 
            {
                "intent": "", 
                "context": "ArrayList str = new ArrayList();", 
                "normalized_context": "ArrayList str = new ArrayList();", 
                "code_snippet": "str.add(\"Value1\");", 
                "normalized_code_snippet": "str.add(\"Value1\");"
            }, 
            {
                "intent": "", 
                "context": "ArrayList str = new ArrayList();", 
                "normalized_context": "ArrayList str = new ArrayList();", 
                "code_snippet": "str.add(\"Value1\");", 
                "normalized_code_snippet": "str.add(\"Value1\");"
            }, 
            {
                "intent": "", 
                "context": "ArrayList str = new ArrayList();", 
                "normalized_context": "ArrayList str = new ArrayList();", 
                "code_snippet": "str.add(\"Value1\");", 
                "normalized_code_snippet": "str.add(\"Value1\");"
            }
        ]
    }, 
    {
        "question_id": 21083170, 
        "title": "Spring Boot - how to configure port", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "@Bean\n    public EmbeddedServletContainerCustomizer containerCustomizer() {\n        return (container -> {\n            container.setPort(8012);\n        });\n    }", 
                "normalized_code_snippet": "return (container -> {\n    container.setPort(8012);\n});"
            }
        ]
    }, 
    {
        "question_id": 1946668, 
        "title": "Sorting using Comparator- Descending order (User defined classes)", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(unsortedList,new Comparator<Person>() {\n    @Override\n    public int compare(Person a, Person b) {\n        return b.getName().compareTo(a.getName());\n    }\n});", 
                "normalized_code_snippet": "Collections.sort(unsortedList, new Comparator<Person>() {\n\n    @Override\n    public int compare(Person a, Person b) {\n        return b.getName().compareTo(a.getName());\n    }\n});"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(unsortedList,new Comparator<Person>() {\n    @Override\n    public int compare(Person a, Person b) {\n        return a.getName().compareTo(b.getName());\n    }\n});", 
                "normalized_code_snippet": "Collections.sort(unsortedList, new Comparator<Person>() {\n\n    @Override\n    public int compare(Person a, Person b) {\n        return a.getName().compareTo(b.getName());\n    }\n});"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(personList, (Person a, Person b) -> b.getName().compareTo(a.getName()));", 
                "normalized_code_snippet": "Collections.sort(personList, (Person a, Person b) -> b.getName().compareTo(a.getName()));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "personList.sort((a,b)->b.getName().compareTo(a.getName()));", 
                "normalized_code_snippet": "personList.sort((a, b) -> b.getName().compareTo(a.getName()));"
            }, 
            {
                "intent": "", 
                "context": "List<Person> people = new ArrayList<Person>();\n        people.add( new Person(\"Homer\", 38) );\n        people.add( new Person(\"Marge\", 35) );\n        people.add( new Person(\"Bart\", 15) );\n        people.add( new Person(\"Lisa\", 13) );", 
                "normalized_context": "List<Person> people = new ArrayList<Person>();\npeople.add(new Person(\"Homer\", 38));\npeople.add(new Person(\"Marge\", 35));\npeople.add(new Person(\"Bart\", 15));\npeople.add(new Person(\"Lisa\", 13));", 
                "code_snippet": "Collections.sort(people);", 
                "normalized_code_snippet": "Collections.sort(people);"
            }, 
            {
                "intent": "", 
                "context": "List<Person> people = new ArrayList<Person>();\n        people.add( new Person(\"Homer\", 38) );\n        people.add( new Person(\"Marge\", 35) );\n        people.add( new Person(\"Bart\", 15) );\n        people.add( new Person(\"Lisa\", 13) );", 
                "normalized_context": "List<Person> people = new ArrayList<Person>();\npeople.add(new Person(\"Homer\", 38));\npeople.add(new Person(\"Marge\", 35));\npeople.add(new Person(\"Bart\", 15));\npeople.add(new Person(\"Lisa\", 13));", 
                "code_snippet": "Collections.sort(people, Collections.reverseOrder());", 
                "normalized_code_snippet": "Collections.sort(people, Collections.reverseOrder());"
            }, 
            {
                "intent": "", 
                "context": "static class AgeComparator implements Comparator<Person>\n    {\n        public int compare(Person p1, Person p2)\n        {\n            int age1 = p1.getAge();\n            int age2 = p2.getAge();\n\n            if (age1 == age2)\n                return 0;\n            else if (age1 > age2)\n                return 1;\n            else\n                return -1;\n        }\n    }\nList<Person> people = new ArrayList<Person>();\n        people.add( new Person(\"Homer\", 38) );\n        people.add( new Person(\"Marge\", 35) );\n        people.add( new Person(\"Bart\", 15) );\n        people.add( new Person(\"Lisa\", 13) );", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(people,\n            Collections.reverseOrder(new Person.AgeComparator()));", 
                "normalized_code_snippet": "Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));"
            }, 
            {
                "intent": "", 
                "context": "static class AgeComparator implements Comparator<Person>\n    {\n        public int compare(Person p1, Person p2)\n        {\n            int age1 = p1.getAge();\n            int age2 = p2.getAge();\n\n            if (age1 == age2)\n                return 0;\n            else if (age1 > age2)\n                return 1;\n            else\n                return -1;\n        }\n    }\nList<Person> people = new ArrayList<Person>();", 
                "normalized_context": "static class AgeComparator implements Comparator<Person> {\n\n    public int compare(Person p1, Person p2) {\n        int age1 = p1.getAge();\n        int age2 = p2.getAge();\n        if (age1 == age2)\n            return 0;\n        else if (age1 > age2)\n            return 1;\n        else\n            return -1;\n    }\n}\nList<Person> people = new ArrayList<Person>();", 
                "code_snippet": "Collections.sort(people, new Person.AgeComparator());", 
                "normalized_code_snippet": "Collections.sort(people, new Person.AgeComparator());"
            }
        ]
    }, 
    {
        "question_id": 822322, 
        "title": "How to implement a Map with multiple keys?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Map<K2, K1> m2;\nMap<K1, V>  m1;", 
                "normalized_code_snippet": "Map<K2, K1> m2;\nMap<K1, V> m1;"
            }
        ]
    }, 
    {
        "question_id": 4967482, 
        "title": "Redirect pages in JSP?", 
        "annotations": [
            {
                "intent": "Redirect pages in JSP?", 
                "context": "String redirectURL = \"http://whatever.com/myJSPFile.jsp\";", 
                "normalized_context": "String redirectURL = \"http://whatever.com/myJSPFile.jsp\";", 
                "code_snippet": "response.sendRedirect(redirectURL);", 
                "normalized_code_snippet": "response.sendRedirect(redirectURL);"
            }
        ]
    }, 
    {
        "question_id": 10959424, 
        "title": "Show only two digit after decimal", 
        "annotations": [
            {
                "intent": "Show only two digit after decimal", 
                "context": "double i2=i/60000;", 
                "normalized_context": "double i2 = i / 60000;", 
                "code_snippet": "tv.setText(new DecimalFormat(\"##.##\").format(i2));", 
                "normalized_code_snippet": "tv.setText(new DecimalFormat(\"##.##\").format(i2));"
            }, 
            {
                "intent": "Show only two digit after decimal", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String.format(\"%.2f\", i2)", 
                "normalized_code_snippet": "String.format(\"%.2f\", i2);"
            }, 
            {
                "intent": "Show only two digit after decimal", 
                "context": "double value = 12.3457652133", 
                "normalized_context": "double value = 12.3457652133;", 
                "code_snippet": "value =Double.parseDouble(new DecimalFormat(\"##.####\").format(value));", 
                "normalized_code_snippet": "value = Double.parseDouble(new DecimalFormat(\"##.####\").format(value));"
            }
        ]
    }, 
    {
        "question_id": 15874117, 
        "title": "How to set delay in android?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "final Handler handler = new Handler();\nhandler.postDelayed(new Runnable() {\n    @Override\n    public void run() {\n        // Do something after 5s = 5000ms\n        buttons[inew][jnew].setBackgroundColor(Color.BLACK);\n    }\n}, 5000);", 
                "normalized_code_snippet": "final Handler handler = new Handler();\nhandler.postDelayed(new Runnable() {\n\n    @Override\n    public void run() {\n        buttons[inew][jnew].setBackgroundColor(Color.BLACK);\n    }\n}, 5000);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "new CountDownTimer(30000, 1000) {\n         public void onFinish() {\n             // When timer is finished \n             // Execute your code here\n     }\n\n     public void onTick(long millisUntilFinished) {\n              // millisUntilFinished    The amount of time until finished.\n     }\n   }.start();", 
                "normalized_code_snippet": "new CountDownTimer(30000, 1000) {\n\n    public void onFinish() {\n    }\n\n    public void onTick(long millisUntilFinished) {\n    }\n}.start();"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Thread.sleep(millis)", 
                "normalized_code_snippet": "Thread.sleep(millis);"
            }
        ]
    }, 
    {
        "question_id": 8119366, 
        "title": "Sorting HashMap by values", 
        "annotations": [
            {
                "intent": "Sorting HashMap by values", 
                "context": "HashMap<Integer,String> map = new HashMap<Integer,String>();\nmap.put(1,\"froyo\");\nmap.put(2,\"abby\");\nmap.put(3,\"denver\");\nmap.put(4,\"frost\");\nmap.put(5,\"daisy\");", 
                "normalized_context": "HashMap<Integer, String> map = new HashMap<Integer, String>();\nmap.put(1, \"froyo\");\nmap.put(2, \"abby\");\nmap.put(3, \"denver\");\nmap.put(4, \"frost\");\nmap.put(5, \"daisy\");", 
                "code_snippet": "Map<Integer, String> sortedMap = \n     unsortedMap.entrySet().stream()\n    .sorted(Entry.comparingByValue())\n    .collect(Collectors.toMap(Entry::getKey, Entry::getValue,\n                              (e1, e2) -> e1, LinkedHashMap::new));", 
                "normalized_code_snippet": "Map<Integer, String> sortedMap = unsortedMap.entrySet().stream().sorted(Entry.comparingByValue()).collect(Collectors.toMap(Entry::getKey, Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));"
            }, 
            {
                "intent": "Sorting HashMap by values", 
                "context": "package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue\n{\n    public static boolean ASC = true;\n    public static boolean DESC = false;\n\n    public static void main(String[] args)\n    {\n\n        // Creating dummy unsorted map\n        Map<String, Integer> unsortMap = new HashMap<String, Integer>();\n        unsortMap.put(\"B\", 55);\n        unsortMap.put(\"A\", 80);\n        unsortMap.put(\"D\", 20);\n        unsortMap.put(\"C\", 70);\nprivate static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order)\n    {\n\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n\n        // Sorting the list based on values\n        Collections.sort(list, new Comparator<Entry<String, Integer>>()\n        {\n            public int compare(Entry<String, Integer> o1,\n                    Entry<String, Integer> o2)\n            {\n                if (order)\n                {\n                    return o1.getValue().compareTo(o2.getValue());\n                }\n                else\n                {\n                    return o2.getValue().compareTo(o1.getValue());\n\n                }\n            }\n        });\n\n        // Maintaining insertion order with the help of LinkedList\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list)\n        {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map)\n    {\n        for (Entry<String, Integer> entry : map.entrySet())\n        {\n            System.out.println(\"Key : \" + entry.getKey() + \" Value : \"+ entry.getValue());\n        }\n    }", 
                "normalized_context": null, 
                "code_snippet": "Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);", 
                "normalized_code_snippet": "Map<String, Integer> sortedMapAsc = sortByComparator(unsortMap, ASC);"
            }, 
            {
                "intent": "Sorting HashMap by values", 
                "context": "package com.rais;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class SortMapByValue\n{\n    public static boolean ASC = true;\n    public static boolean DESC = false;\nprivate static Map<String, Integer> sortByComparator(Map<String, Integer> unsortMap, final boolean order)\n    {\n\n        List<Entry<String, Integer>> list = new LinkedList<Entry<String, Integer>>(unsortMap.entrySet());\n\n        // Sorting the list based on values\n        Collections.sort(list, new Comparator<Entry<String, Integer>>()\n        {\n            public int compare(Entry<String, Integer> o1,\n                    Entry<String, Integer> o2)\n            {\n                if (order)\n                {\n                    return o1.getValue().compareTo(o2.getValue());\n                }\n                else\n                {\n                    return o2.getValue().compareTo(o1.getValue());\n\n                }\n            }\n        });\n\n        // Maintaining insertion order with the help of LinkedList\n        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();\n        for (Entry<String, Integer> entry : list)\n        {\n            sortedMap.put(entry.getKey(), entry.getValue());\n        }\n\n        return sortedMap;\n    }\n\n    public static void printMap(Map<String, Integer> map)\n    {\n        for (Entry<String, Integer> entry : map.entrySet())\n        {\n            System.out.println(\"Key : \" + entry.getKey() + \" Value : \"+ entry.getValue());\n        }\n    }", 
                "normalized_context": null, 
                "code_snippet": "Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);", 
                "normalized_code_snippet": "Map<String, Integer> sortedMapDesc = sortByComparator(unsortMap, DESC);"
            }, 
            {
                "intent": "Sorting HashMap by values", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public LinkedHashMap<Integer, String> sortHashMapByValues(\n        HashMap<Integer, String> passedMap) {\n    List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\n    List<String> mapValues = new ArrayList<>(passedMap.values());\n    Collections.sort(mapValues);\n    Collections.sort(mapKeys);\n\n    LinkedHashMap<Integer, String> sortedMap =\n        new LinkedHashMap<>();\n\n    Iterator<String> valueIt = mapValues.iterator();\n    while (valueIt.hasNext()) {\n        String val = valueIt.next();\n        Iterator<Integer> keyIt = mapKeys.iterator();\n\n        while (keyIt.hasNext()) {\n            Integer key = keyIt.next();\n            String comp1 = passedMap.get(key);\n            String comp2 = val;\n\n            if (comp1.equals(comp2)) {\n                keyIt.remove();\n                sortedMap.put(key, val);\n                break;\n            }\n        }\n    }\n    return sortedMap;\n}", 
                "normalized_code_snippet": "List<Integer> mapKeys = new ArrayList<>(passedMap.keySet());\nList<String> mapValues = new ArrayList<>(passedMap.values());\nCollections.sort(mapValues);\nCollections.sort(mapKeys);\nLinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();\nIterator<String> valueIt = mapValues.iterator();\nwhile (valueIt.hasNext()) {\n    String val = valueIt.next();\n    Iterator<Integer> keyIt = mapKeys.iterator();\n    while (keyIt.hasNext()) {\n        Integer key = keyIt.next();\n        String comp1 = passedMap.get(key);\n        String comp2 = val;\n        if (comp1.equals(comp2)) {\n            keyIt.remove();\n            sortedMap.put(key, val);\n            break;\n        }\n    }\n}"
            }
        ]
    }, 
    {
        "question_id": 1816673, 
        "title": "How do I check if a file exists in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "File f = new File(filePathString);", 
                "normalized_context": "File f = new File(filePathString);", 
                "code_snippet": "if(f.exists() && !f.isDirectory()) {", 
                "normalized_code_snippet": "if (f.exists() && !f.isDirectory()) {\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "new File(\"path/to/file.txt\").isFile();", 
                "normalized_code_snippet": "new File(\"path/to/file.txt\").isFile();"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "new File(\"C:/\").exists()", 
                "normalized_code_snippet": "new File(\"C:/\").exists();"
            }, 
            {
                "intent": "", 
                "context": "import java.nio.file.*;", 
                "normalized_context": "import java.nio.file.*;", 
                "code_snippet": "\n\nPath path = Paths.get(filePathString);\n\nif (Files.exists(path)) {\n  ", 
                "normalized_code_snippet": "Path path = Paths.get(filePathString);\nif (Files.exists(path)) {\n}"
            }
        ]
    }, 
    {
        "question_id": 13942701, 
        "title": "Take a char input from the Scanner", 
        "annotations": [
            {
                "intent": "Take a char input from the Scanner", 
                "context": "Scanner reader = new Scanner(System.in);", 
                "normalized_context": "Scanner reader = new Scanner(System.in);", 
                "code_snippet": "char c = reader.next().charAt(0);", 
                "normalized_code_snippet": "char c = reader.next().charAt(0);"
            }, 
            {
                "intent": "Take a char input from the Scanner", 
                "context": "Scanner reader = new Scanner(System.in);", 
                "normalized_context": "Scanner reader = new Scanner(System.in);", 
                "code_snippet": "char c = reader.findInLine(\".\").charAt(0);", 
                "normalized_code_snippet": "char c = reader.findInLine(\".\").charAt(0);"
            }, 
            {
                "intent": "Take a char input from the Scanner", 
                "context": "Scanner reader = new Scanner(System.in);", 
                "normalized_context": "Scanner reader = new Scanner(System.in);", 
                "code_snippet": "char c = reader.next(\".\").charAt(0);", 
                "normalized_code_snippet": "char c = reader.next(\".\").charAt(0);"
            }, 
            {
                "intent": "Take a char input from the Scanner", 
                "context": "Scanner reader = new Scanner(System.in);", 
                "normalized_context": "Scanner reader = new Scanner(System.in);", 
                "code_snippet": "reader.useDelimiter(\"\");", 
                "normalized_code_snippet": "reader.useDelimiter(\"\");"
            }, 
            {
                "intent": "Take a char input from the Scanner", 
                "context": "Scanner reader = new Scanner(System.in);", 
                "normalized_context": "Scanner reader = new Scanner(System.in);", 
                "code_snippet": "char c = reader.next().charAt(0);", 
                "normalized_code_snippet": "char c = reader.next().charAt(0);"
            }, 
            {
                "intent": "Take a char input from the Scanner", 
                "context": "Scanner reader = new Scanner(System.in);", 
                "normalized_context": "Scanner reader = new Scanner(System.in);", 
                "code_snippet": "char c = reader.next().trim().charAt(0);", 
                "normalized_code_snippet": "char c = reader.next().trim().charAt(0);"
            }
        ]
    }, 
    {
        "question_id": 3551821, 
        "title": "Android write to sd card folder", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "File sdCard = Environment.getExternalStorageDirectory();\nFile dir = new File (sdCard.getAbsolutePath() + \"/dir1/dir2\");\ndir.mkdirs();\nFile file = new File(dir, \"filename\");\n\nFileOutputStream f = new FileOutputStream(file);", 
                "normalized_code_snippet": "File sdCard = Environment.getExternalStorageDirectory();\nFile dir = new File(sdCard.getAbsolutePath() + \"/dir1/dir2\");\ndir.mkdirs();\nFile file = new File(dir, \"filename\");\nFileOutputStream f = new FileOutputStream(file);"
            }, 
            {
                "intent": "", 
                "context": "boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\n\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    // We can read and write the media\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    // We can only read the media\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n    // Something else is wrong. It may be one of many other states, but all we need\n    //  to know is we can neither read nor write\n    mExternalStorageAvailable = mExternalStorageWriteable = false;\n}", 
                "normalized_context": "boolean mExternalStorageAvailable = false;\nboolean mExternalStorageWriteable = false;\nString state = Environment.getExternalStorageState();\nif (Environment.MEDIA_MOUNTED.equals(state)) {\n    mExternalStorageAvailable = mExternalStorageWriteable = true;\n} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {\n    mExternalStorageAvailable = true;\n    mExternalStorageWriteable = false;\n} else {\n    mExternalStorageAvailable = mExternalStorageWriteable = false;\n}", 
                "code_snippet": "// get external storage file reference\nFileWriter writer = new FileWriter(getExternalStorageDirectory()); \n// Writes the content to the file\nwriter.write(\"This\\n is\\n an\\n example\\n\"); \nwriter.flush();\nwriter.close();", 
                "normalized_code_snippet": "FileWriter writer = new FileWriter(getExternalStorageDirectory());\nwriter.write(\"This\\n is\\n an\\n example\\n\");\nwriter.flush();\nwriter.close();"
            }
        ]
    }, 
    {
        "question_id": 7833689, 
        "title": "Java String new line", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.println(\"I\\nam\\na\\nboy\");", 
                "normalized_code_snippet": "System.out.println(\"I\\nam\\na\\nboy\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.println(\"I am a boy\".replaceAll(\"\\\\s+\",\"\\n\"));", 
                "normalized_code_snippet": "System.out.println(\"I am a boy\".replaceAll(\"\\\\s+\", \"\\n\"));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.println(\"I am a boy\".replaceAll(\"\\\\s+\",System.getProperty(\"line.separator\")));", 
                "normalized_code_snippet": "System.out.println(\"I am a boy\".replaceAll(\"\\\\s+\", System.getProperty(\"line.separator\")));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String x = \"Hello,\" + System.lineSeparator() + \"there\";", 
                "normalized_code_snippet": "String x = \"Hello,\" + System.lineSeparator() + \"there\";"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.println(\"I\\nam\\na\\nboy\");", 
                "normalized_code_snippet": "System.out.println(\"I\\nam\\na\\nboy\");"
            }
        ]
    }, 
    {
        "question_id": 16027229, 
        "title": "Reading from a text file and storing in a String", 
        "annotations": [
            {
                "intent": "Reading from a text file and storing in a String", 
                "context": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;", 
                "normalized_context": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;", 
                "code_snippet": "String readFile(String fileName) throws IOException {\n    BufferedReader br = new BufferedReader(new FileReader(fileName));\n    try {\n        StringBuilder sb = new StringBuilder();\n        String line = br.readLine();\n\n        while (line != null) {\n            sb.append(line);\n            sb.append(\"\\n\");\n            line = br.readLine();\n        }\n        return sb.toString();\n    } finally {\n        br.close();\n    }\n}", 
                "normalized_code_snippet": "BufferedReader br = new BufferedReader(new FileReader(fileName));\ntry {\n    StringBuilder sb = new StringBuilder();\n    String line = br.readLine();\n    while (line != null) {\n        sb.append(line);\n        sb.append(\"\\n\");\n        line = br.readLine();\n    }\n    return sb.toString();\n} finally {\n    br.close();\n}"
            }
        ]
    }, 
    {
        "question_id": 2891361, 
        "title": "How to set time zone of a java.util.Date?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "SimpleDateFormat isoFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\nisoFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\nDate date = isoFormat.parse(\"2010-05-23T09:01:02\");\n", 
                "normalized_code_snippet": "SimpleDateFormat isoFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\nisoFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\nDate date = isoFormat.parse(\"2010-05-23T09:01:02\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));", 
                "normalized_code_snippet": "TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));"
            }
        ]
    }, 
    {
        "question_id": 7074402, 
        "title": "How to insert an object in an ArrayList at a specific position", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "str.add(1, 11);", 
                "normalized_code_snippet": "str.add(1, 11);"
            }, 
            {
                "intent": "", 
                "context": "ArrayList<Integer> str=new ArrayList<Integer>();\n    str.add(0);\n    str.add(1);\n    str.add(2);\n    str.add(3);", 
                "normalized_context": "ArrayList<Integer> str = new ArrayList<Integer>();\nstr.add(0);\nstr.add(1);\nstr.add(2);\nstr.add(3);", 
                "code_snippet": "str.add(2, 12);", 
                "normalized_code_snippet": "str.add(2, 12);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "arrayList.add(1,\"INSERTED ELEMENT\");", 
                "normalized_code_snippet": "arrayList.add(1, \"INSERTED ELEMENT\");"
            }
        ]
    }, 
    {
        "question_id": 1378920, 
        "title": "How can I make a multipart/form-data POST request using Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost(\"...\");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody(\"field1\", \"yes\", ContentType.TEXT_PLAIN);\n\n// This attaches the file to the POST:\nFile f = new File(\"[/path/to/upload]\");\nbuilder.addBinaryBody(\n    \"file\",\n    new FileInputStream(f),\n    ContentType.APPLICATION_OCTET_STREAM,\n    f.getName()\n);\n\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();", 
                "normalized_code_snippet": "CloseableHttpClient httpClient = HttpClients.createDefault();\nHttpPost uploadFile = new HttpPost(\"...\");\nMultipartEntityBuilder builder = MultipartEntityBuilder.create();\nbuilder.addTextBody(\"field1\", \"yes\", ContentType.TEXT_PLAIN);\nFile f = new File(\"[/path/to/upload]\");\nbuilder.addBinaryBody(\"file\", new FileInputStream(f), ContentType.APPLICATION_OCTET_STREAM, f.getName());\nHttpEntity multipart = builder.build();\nuploadFile.setEntity(multipart);\nCloseableHttpResponse response = httpClient.execute(uploadFile);\nHttpEntity responseEntity = response.getEntity();"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\n\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody(\"Filename: \" + fileName);\n\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart(\"bin\", bin);\nreqEntity.addPart(\"comment\", comment);\nhttppost.setEntity(reqEntity);\n\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();", 
                "normalized_code_snippet": "HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(url);\nFileBody bin = new FileBody(new File(fileName));\nStringBody comment = new StringBody(\"Filename: \" + fileName);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart(\"bin\", bin);\nreqEntity.addPart(\"comment\", comment);\nhttppost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httppost);\nHttpEntity resEntity = response.getEntity();"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "HttpClient httpclient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\n\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart(\"upload-file\", uploadFilePart);\nhttpPost.setEntity(reqEntity);\n\nHttpResponse response = httpclient.execute(httpPost);", 
                "normalized_code_snippet": "HttpClient httpclient = new DefaultHttpClient();\nHttpPost httpPost = new HttpPost(url);\nFileBody uploadFilePart = new FileBody(uploadFile);\nMultipartEntity reqEntity = new MultipartEntity();\nreqEntity.addPart(\"upload-file\", uploadFilePart);\nhttpPost.setEntity(reqEntity);\nHttpResponse response = httpclient.execute(httpPost);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod(\"POST\");\n\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart(\"file\", fileBody);\n\nconnection.setRequestProperty(\"Content-Type\", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();", 
                "normalized_code_snippet": "HttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestMethod(\"POST\");\nFileBody fileBody = new FileBody(new File(fileName));\nMultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.STRICT);\nmultipartEntity.addPart(\"file\", fileBody);\nconnection.setRequestProperty(\"Content-Type\", multipartEntity.getContentType().getValue());\nOutputStream out = connection.getOutputStream();\ntry {\n    multipartEntity.writeTo(out);\n} finally {\n    out.close();\n}\nint status = connection.getResponseCode();"
            }
        ]
    }, 
    {
        "question_id": 6349421, 
        "title": "How to use Jackson to deserialise an array of objects", 
        "annotations": [
            {
                "intent": "", 
                "context": "import com.fasterxml.jackson.databind.ObjectMapper;// in play 2.3\nObjectMapper mapper = new ObjectMapper();", 
                "normalized_context": null, 
                "code_snippet": "MyClass[] myObjects = mapper.readValue(json, MyClass[].class);", 
                "normalized_code_snippet": "MyClass[] myObjects = mapper.readValue(json, MyClass[].class);"
            }, 
            {
                "intent": "", 
                "context": "import com.fasterxml.jackson.databind.ObjectMapper;// in play 2.3\nObjectMapper mapper = new ObjectMapper();", 
                "normalized_context": null, 
                "code_snippet": "List<MyClass> myObjects = mapper.readValue(jsonInput, new TypeReference<List<MyClass>>(){});\n", 
                "normalized_code_snippet": "List<MyClass> myObjects = mapper.readValue(jsonInput, new TypeReference<List<MyClass>>() {\n});"
            }, 
            {
                "intent": "", 
                "context": "import com.fasterxml.jackson.databind.ObjectMapper;// in play 2.3\nObjectMapper mapper = new ObjectMapper();", 
                "normalized_context": null, 
                "code_snippet": "List<MyClass> myObjects = mapper.readValue(jsonInput, mapper.getTypeFactory().constructCollectionType(List.class, MyClass.class));", 
                "normalized_code_snippet": "List<MyClass> myObjects = mapper.readValue(jsonInput, mapper.getTypeFactory().constructCollectionType(List.class, MyClass.class));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "List<MyClass> myObjects = Arrays.asList(mapper.readValue(json, MyClass[].class))", 
                "normalized_code_snippet": "List<MyClass> myObjects = Arrays.asList(mapper.readValue(json, MyClass[].class));"
            }, 
            {
                "intent": "", 
                "context": "ObjectMapper mapper = new ObjectMapper();\n    JsonFactory f = new JsonFactory();\n    List<User> lstUser = null;", 
                "normalized_context": "ObjectMapper mapper = new ObjectMapper();\nJsonFactory f = new JsonFactory();\nList<User> lstUser = null;", 
                "code_snippet": "JsonParser jp = f.createJsonParser(new File(\"C:\\\\maven\\\\user.json\"));\n    TypeReference<List<User>> tRef = new TypeReference<List<User>>() {};\n    lstUser = mapper.readValue(jp, tRef);", 
                "normalized_code_snippet": "JsonParser jp = f.createJsonParser(new File(\"C:\\\\maven\\\\user.json\"));\nTypeReference<List<User>> tRef = new TypeReference<List<User>>() {\n};\nlstUser = mapper.readValue(jp, tRef);"
            }
        ]
    }, 
    {
        "question_id": 1942644, 
        "title": "Get generic type of java.util.List", 
        "annotations": [
            {
                "intent": "Get generic type of java.util.List", 
                "context": "package test;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Test {\n\n    List<String> stringList = new ArrayList<String>();\n    List<Integer> integerList = new ArrayList<Integer>();", 
                "normalized_context": null, 
                "code_snippet": "Field stringListField = Test.class.getDeclaredField(\"stringList\");\n        ParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\n        Class<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];", 
                "normalized_code_snippet": "Field stringListField = Test.class.getDeclaredField(\"stringList\");\nParameterizedType stringListType = (ParameterizedType) stringListField.getGenericType();\nClass<?> stringListClass = (Class<?>) stringListType.getActualTypeArguments()[0];"
            }, 
            {
                "intent": "Get generic type of java.util.List", 
                "context": "package test;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Test {\n\n    List<String> stringList = new ArrayList<String>();\n    List<Integer> integerList = new ArrayList<Integer>();", 
                "normalized_context": null, 
                "code_snippet": "Field integerListField = Test.class.getDeclaredField(\"integerList\");\n        ParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\n        Class<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];", 
                "normalized_code_snippet": "Field integerListField = Test.class.getDeclaredField(\"integerList\");\nParameterizedType integerListType = (ParameterizedType) integerListField.getGenericType();\nClass<?> integerListClass = (Class<?>) integerListType.getActualTypeArguments()[0];"
            }
        ]
    }, 
    {
        "question_id": 18441846, 
        "title": "How to sort an ArrayList in Java", 
        "annotations": [
            {
                "intent": "", 
                "context": "List<Fruit> fruits= new ArrayList<Fruit>();\n\nFruit fruit;\nfor(int i = 0; i < 100; i++)\n{\n  fruit = new Fruit();\n  fruit.setname(...);\n  fruits.add(fruit);\n}", 
                "normalized_context": null, 
                "code_snippet": "// Sorting\nCollections.sort(fruits, new Comparator<Fruit>() {\n        @Override\n        public int compare(Fruit fruit2, Fruit fruit1)\n        {\n\n            return  fruit1.fruitName.compareTo(fruit2.fruitName);\n        }\n    });", 
                "normalized_code_snippet": "Collections.sort(fruits, new Comparator<Fruit>() {\n\n    @Override\n    public int compare(Fruit fruit2, Fruit fruit1) {\n        return fruit1.fruitName.compareTo(fruit2.fruitName);\n    }\n});"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(fruitList);", 
                "normalized_code_snippet": "Collections.sort(fruitList);"
            }, 
            {
                "intent": "", 
                "context": "BeanComparator fieldComparator = new BeanComparator(\n                \"fruitName\");", 
                "normalized_context": "BeanComparator fieldComparator = new BeanComparator(\"fruitName\");", 
                "code_snippet": "Collections.sort(fruits, fieldComparator);", 
                "normalized_code_snippet": "Collections.sort(fruits, fieldComparator);"
            }
        ]
    }, 
    {
        "question_id": 1519736, 
        "title": "Random shuffling of an array", 
        "annotations": [
            {
                "intent": "Random shuffling of an array", 
                "context": "import java.util.*;\nimport java.util.concurrent.ThreadLocalRandom;", 
                "normalized_context": "import java.util.*;\nimport java.util.concurrent.ThreadLocalRandom;", 
                "code_snippet": "// Implementing Fisher\u2013Yates shuffle\n  static void shuffleArray(int[] ar)\n  {\n    // If running on Java 6 or older, use `new Random()` on RHS here\n    Random rnd = ThreadLocalRandom.current();\n    for (int i = ar.length - 1; i > 0; i--)\n    {\n      int index = rnd.nextInt(i + 1);\n      // Simple swap\n      int a = ar[index];\n      ar[index] = ar[i];\n      ar[i] = a;\n    }\n  }", 
                "normalized_code_snippet": "Random rnd = ThreadLocalRandom.current();\nfor (int i = ar.length - 1; i > 0; i--) {\n    int index = rnd.nextInt(i + 1);\n    int a = ar[index];\n    ar[index] = ar[i];\n    ar[i] = a;\n}"
            }, 
            {
                "intent": "Random shuffling of an array", 
                "context": "List<Integer> solution = new ArrayList<>();", 
                "normalized_context": "List<Integer> solution = new ArrayList<>();", 
                "code_snippet": "Collections.shuffle(solution);", 
                "normalized_code_snippet": "Collections.shuffle(solution);"
            }, 
            {
                "intent": "Random shuffling of an array", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "private static void shuffleArray(int[] array)\n{\n    int index;\n    Random random = new Random();\n    for (int i = array.length - 1; i > 0; i--)\n    {\n        index = random.nextInt(i + 1);\n        if (index != i)\n        {\n            array[index] ^= array[i];\n            array[i] ^= array[index];\n            array[index] ^= array[i];\n        }\n    }\n}", 
                "normalized_code_snippet": "int index;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    if (index != i) {\n        array[index] ^= array[i];\n        array[i] ^= array[index];\n        array[index] ^= array[i];\n    }\n}"
            }, 
            {
                "intent": "Random shuffling of an array", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "private static void shuffleArray(int[] array)\n{\n    int index, temp;\n    Random random = new Random();\n    for (int i = array.length - 1; i > 0; i--)\n    {\n        index = random.nextInt(i + 1);\n        temp = array[index];\n        array[index] = array[i];\n        array[i] = temp;\n    }\n}", 
                "normalized_code_snippet": "int index, temp;\nRandom random = new Random();\nfor (int i = array.length - 1; i > 0; i--) {\n    index = random.nextInt(i + 1);\n    temp = array[index];\n    array[index] = array[i];\n    array[i] = temp;\n}"
            }
        ]
    }, 
    {
        "question_id": 12678781, 
        "title": "Reversing an Array in Java", 
        "annotations": [
            {
                "intent": "Reversing an Array in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "for (i = 0; i < array.length / 2; i++) {\n  int temp = array[i];\n  array[i] = array[array.length - 1 - i];\n  array[array.length - 1 - i] = temp;\n}", 
                "normalized_code_snippet": "for (i = 0; i < array.length / 2; i++) {\n    int temp = array[i];\n    array[i] = array[array.length - 1 - i];\n    array[array.length - 1 - i] = temp;\n}"
            }, 
            {
                "intent": "Reversing an Array in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.reverse(Arrays.asList(array));", 
                "normalized_code_snippet": "Collections.reverse(Arrays.asList(array));"
            }, 
            {
                "intent": "Reversing an Array in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.reverse(list);", 
                "normalized_code_snippet": "Collections.reverse(list);"
            }
        ]
    }, 
    {
        "question_id": 10796160, 
        "title": "Splitting a Java String by the pipe symbol using split(\"|\")", 
        "annotations": [
            {
                "intent": "Splitting a Java String by the pipe symbol using split(\"|\")", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "test.split(\"\\\\|\");", 
                "normalized_code_snippet": "test.split(\"\\\\|\");"
            }, 
            {
                "intent": "Splitting a Java String by the pipe symbol using split(\"|\")", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "test.split(Pattern.quote(\"|\"));", 
                "normalized_code_snippet": "test.split(Pattern.quote(\"|\"));"
            }, 
            {
                "intent": "Splitting a Java String by the pipe symbol using split(\"|\")", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "string.split(Pattern.quote(\"|\"))", 
                "normalized_code_snippet": "string.split(Pattern.quote(\"|\"));"
            }, 
            {
                "intent": "Splitting a Java String by the pipe symbol using split(\"|\")", 
                "context": "String test = \"A|B|C||D\";", 
                "normalized_context": "String test = \"A|B|C||D\";", 
                "code_snippet": "String[] result = test.split(\"\\\\|\");", 
                "normalized_code_snippet": "String[] result = test.split(\"\\\\|\");"
            }
        ]
    }, 
    {
        "question_id": 2938502, 
        "title": "Sending POST data in Android", 
        "annotations": [
            {
                "intent": "Sending POST data in Android", 
                "context": "public class CallAPI extends AsyncTask<String, String, String> {\nString urlString = params[0]; // URL to call\n\n            String resultToDisplay = \"\";\n\n            InputStream in = null;", 
                "normalized_context": null, 
                "code_snippet": "URL url = new URL(urlString);\n\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n\n                in = new BufferedInputStream(urlConnection.getInputStream());", 
                "normalized_code_snippet": "URL url = new URL(urlString);\nHttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\nin = new BufferedInputStream(urlConnection.getInputStream());"
            }, 
            {
                "intent": "Sending POST data in Android", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "// Create a new HttpClient and Post Header\n    HttpClient httpclient = new DefaultHttpClient();\n    HttpPost httppost = new HttpPost(\"http://www.yoursite.com/script.php\");\n\n    try {\n        // Add your data\n        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n        nameValuePairs.add(new BasicNameValuePair(\"id\", \"12345\"));\n        nameValuePairs.add(new BasicNameValuePair(\"stringdata\", \"Hi\"));\n        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n\n        // Execute HTTP Post Request\n        HttpResponse response = httpclient.execute(httppost);\n\n    } catch (ClientProtocolException e) {\n        // TODO Auto-generated catch block\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n    }", 
                "normalized_code_snippet": "HttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(\"http://www.yoursite.com/script.php\");\ntry {\n    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n    nameValuePairs.add(new BasicNameValuePair(\"id\", \"12345\"));\n    nameValuePairs.add(new BasicNameValuePair(\"stringdata\", \"Hi\"));\n    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n    HttpResponse response = httpclient.execute(httppost);\n} catch (ClientProtocolException e) {\n} catch (IOException e) {\n}"
            }, 
            {
                "intent": "Sending POST data in Android", 
                "context": "private String getPostDataString(HashMap<String, String> params) throws UnsupportedEncodingException{\n        StringBuilder result = new StringBuilder();\n        boolean first = true;\n        for(Map.Entry<String, String> entry : params.entrySet()){\n            if (first)\n                first = false;\n            else\n                result.append(\"&\");\n\n            result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n            result.append(\"=\");\n            result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n        }\n\n        return result.toString();\n    }", 
                "normalized_context": "StringBuilder result = new StringBuilder();\nboolean first = true;\nfor (Map.Entry<String, String> entry : params.entrySet()) {\n    if (first)\n        first = false;\n    else\n        result.append(\"&\");\n    result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n    result.append(\"=\");\n    result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n}", 
                "code_snippet": "public String  performPostCall(String requestURL,\n        HashMap<String, String> postDataParams) {\n\n    URL url;\n    String response = \"\";\n    try {\n        url = new URL(requestURL);\n\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setReadTimeout(15000);\n        conn.setConnectTimeout(15000);\n        conn.setRequestMethod(\"GET\");\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n\n\n        OutputStream os = conn.getOutputStream();\n        BufferedWriter writer = new BufferedWriter(\n                new OutputStreamWriter(os, \"UTF-8\"));\n        writer.write(getPostDataString(postDataParams));\n\n        writer.flush();\n        writer.close();\n        os.close();\n        int responseCode=conn.getResponseCode();\n\n        if (responseCode == HttpsURLConnection.HTTP_OK) {\n            String line;\n            BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            while ((line=br.readLine()) != null) {\n                response+=line;\n            }\n        }\n        else {\n            response=\"\";    \n\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return response;\n}\n", 
                "normalized_code_snippet": "URL url;\nString response = \"\";\ntry {\n    url = new URL(requestURL);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(15000);\n    conn.setConnectTimeout(15000);\n    conn.setRequestMethod(\"GET\");\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n    OutputStream os = conn.getOutputStream();\n    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, \"UTF-8\"));\n    writer.write(getPostDataString(postDataParams));\n    writer.flush();\n    writer.close();\n    os.close();\n    int responseCode = conn.getResponseCode();\n    if (responseCode == HttpsURLConnection.HTTP_OK) {\n        String line;\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        while ((line = br.readLine()) != null) {\n            response += line;\n        }\n    } else {\n        response = \"\";\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}"
            }
        ]
    }, 
    {
        "question_id": 15940234, 
        "title": "How to do a SOAP Web Service call from Java class?", 
        "annotations": [
            {
                "intent": "", 
                "context": "import javax.xml.soap.*;\nimport javax.xml.transform.*;\nimport javax.xml.transform.stream.*;\nprivate static SOAPMessage createSOAPRequest() throws Exception {\n        MessageFactory messageFactory = MessageFactory.newInstance();\n        SOAPMessage soapMessage = messageFactory.createMessage();\n        SOAPPart soapPart = soapMessage.getSOAPPart();\n\n        String serverURI = \"http://ws.cdyne.com/\";\n\n        // SOAP Envelope\n        SOAPEnvelope envelope = soapPart.getEnvelope();\n        envelope.addNamespaceDeclaration(\"example\", serverURI);\n\n        /*\n        Constructed SOAP Request Message:\n        <SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:example=\"http://ws.cdyne.com/\">\n            <SOAP-ENV:Header/>\n            <SOAP-ENV:Body>\n                <example:VerifyEmail>\n                    <example:email>mutantninja@gmail.com</example:email>\n                    <example:LicenseKey>123</example:LicenseKey>\n                </example:VerifyEmail>\n            </SOAP-ENV:Body>\n        </SOAP-ENV:Envelope>\n         */\n\n        // SOAP Body\n        SOAPBody soapBody = envelope.getBody();\n        SOAPElement soapBodyElem = soapBody.addChildElement(\"VerifyEmail\", \"example\");\n        SOAPElement soapBodyElem1 = soapBodyElem.addChildElement(\"email\", \"example\");\n        soapBodyElem1.addTextNode(\"mutantninja@gmail.com\");\n        SOAPElement soapBodyElem2 = soapBodyElem.addChildElement(\"LicenseKey\", \"example\");\n        soapBodyElem2.addTextNode(\"123\");\n\n        MimeHeaders headers = soapMessage.getMimeHeaders();\n        headers.addHeader(\"SOAPAction\", serverURI  + \"VerifyEmail\");\n\n        soapMessage.saveChanges();\n\n        /* Print the request message */\n        System.out.print(\"Request SOAP Message = \");\n        soapMessage.writeTo(System.out);\n        System.out.println();\n\n        return soapMessage;\n    }\n\n    /**\n     * Method used to print the SOAP Response\n     */\n    private static void printSOAPResponse(SOAPMessage soapResponse) throws Exception {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        Transformer transformer = transformerFactory.newTransformer();\n        Source sourceContent = soapResponse.getSOAPPart().getContent();\n        System.out.print(\"\\nResponse SOAP Message = \");\n        StreamResult result = new StreamResult(System.out);\n        transformer.transform(sourceContent, result);\n    }", 
                "normalized_context": null, 
                "code_snippet": "// Create SOAP Connection\n            SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\n            SOAPConnection soapConnection = soapConnectionFactory.createConnection();\n\n            // Send SOAP Message to SOAP Server\n            String url = \"http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx\";\n            SOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\n\n            // Process the SOAP Response\n            printSOAPResponse(soapResponse);\n\n            soapConnection.close();", 
                "normalized_code_snippet": "SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();\nSOAPConnection soapConnection = soapConnectionFactory.createConnection();\nString url = \"http://ws.cdyne.com/emailverify/Emailvernotestemail.asmx\";\nSOAPMessage soapResponse = soapConnection.call(createSOAPRequest(), url);\nprintSOAPResponse(soapResponse);\nsoapConnection.close();"
            }, 
            {
                "intent": "", 
                "context": "DefaultWebService defaultWebService = new DefaultWebService();", 
                "normalized_context": "DefaultWebService defaultWebService = new DefaultWebService();", 
                "code_snippet": "String res = defaultWebService.getDefaultWebServiceHttpSoap11Endpoint().login(\"webservice\",\"dadsadasdasd\");", 
                "normalized_code_snippet": "String res = defaultWebService.getDefaultWebServiceHttpSoap11Endpoint().login(\"webservice\", \"dadsadasdasd\");"
            }
        ]
    }, 
    {
        "question_id": 7347856, 
        "title": "How to convert a String into an ArrayList?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "List<String> myList = new ArrayList<String>(Arrays.asList(s.split(\",\")));", 
                "normalized_code_snippet": "List<String> myList = new ArrayList<String>(Arrays.asList(s.split(\",\")));"
            }, 
            {
                "intent": "", 
                "context": "String s = \"lorem,ipsum,dolor,sit,amet\";", 
                "normalized_context": "String s = \"lorem,ipsum,dolor,sit,amet\";", 
                "code_snippet": "List<String> myList = new ArrayList<String>(Arrays.asList(s.split(\",\")));", 
                "normalized_code_snippet": "List<String> myList = new ArrayList<String>(Arrays.asList(s.split(\",\")));"
            }, 
            {
                "intent": "", 
                "context": "String s1=\"[a,b,c,d]\";", 
                "normalized_context": "String s1 = \"[a,b,c,d]\";", 
                "code_snippet": "String replace = s1.replace(\"[\",\"\");\n          System.out.println(replace);\n          String replace1 = replace.replace(\"]\",\"\");\n          System.out.println(replace1);\n          List<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(\",\")));", 
                "normalized_code_snippet": "String replace = s1.replace(\"[\", \"\");\nSystem.out.println(replace);\nString replace1 = replace.replace(\"]\", \"\");\nSystem.out.println(replace1);\nList<String> myList = new ArrayList<String>(Arrays.asList(replace1.split(\",\")));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public ArrayList<Character> convertStringToArraylist(String str) {\n    ArrayList<Character> charList = new ArrayList<Character>();      \n    for(int i = 0; i<str.length();i++){\n        charList.add(str.charAt(i));\n    }\n    return charList;\n}", 
                "normalized_code_snippet": "ArrayList<Character> charList = new ArrayList<Character>();\nfor (int i = 0; i < str.length(); i++) {\n    charList.add(str.charAt(i));\n}"
            }
        ]
    }, 
    {
        "question_id": 672916, 
        "title": "How to get image height and width using java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "BufferedImage bimg = ImageIO.read(new File(filename));", 
                "normalized_context": "BufferedImage bimg = ImageIO.read(new File(filename));", 
                "code_snippet": "int width          = bimg.getWidth();\nint height         = bimg.getHeight();", 
                "normalized_code_snippet": "int width = bimg.getWidth();\nint height = bimg.getHeight();"
            }
        ]
    }, 
    {
        "question_id": 3806062, 
        "title": "How to open a txt file and read numbers in java", 
        "annotations": [
            {
                "intent": "", 
                "context": "List<Integer> list = new ArrayList<Integer>();\nFile file = new File(\"file.txt\");\nBufferedReader reader = null;", 
                "normalized_context": "List<Integer> list = new ArrayList<Integer>();\nFile file = new File(\"file.txt\");\nBufferedReader reader = null;", 
                "code_snippet": "reader = new BufferedReader(new FileReader(file));\n    String text = null;\n\n    while ((text = reader.readLine()) != null) {\n        list.add(Integer.parseInt(text));\n    }", 
                "normalized_code_snippet": "reader = new BufferedReader(new FileReader(file));\nString text = null;\nwhile ((text = reader.readLine()) != null) {\n    list.add(Integer.parseInt(text));\n}"
            }, 
            {
                "intent": "", 
                "context": "Path filePath = Paths.get(\"file.txt\");\nScanner scanner = new Scanner(filePath);\nList<Integer> integers = new ArrayList<>();", 
                "normalized_context": "Path filePath = Paths.get(\"file.txt\");\nScanner scanner = new Scanner(filePath);\nList<Integer> integers = new ArrayList<>();", 
                "code_snippet": "while (scanner.hasNext()) {\n    if (scanner.hasNextInt()) {\n        integers.add(scanner.nextInt());\n    } else {\n        scanner.next();\n    }\n}", 
                "normalized_code_snippet": "while (scanner.hasNext()) {\n    if (scanner.hasNextInt()) {\n        integers.add(scanner.nextInt());\n    } else {\n        scanner.next();\n    }\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "\n\n    BufferedReader br = new BufferedReader(new FileReader(\"textfile.txt\"));\n    String strLine;\n    //Read File Line By Line\n    while ((strLine = br.readLine()) != null)   {\n      // Print the content on the console\n      System.out.println (strLine);\n    }\n    ", 
                "normalized_code_snippet": "BufferedReader br = new BufferedReader(new FileReader(\"textfile.txt\"));\nString strLine;\nwhile ((strLine = br.readLine()) != null) {\n    System.out.println(strLine);\n}"
            }
        ]
    }, 
    {
        "question_id": 2137755, 
        "title": "How do I reverse an int array in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "for(int i = 0; i < validData.length / 2; i++)\n{\n    int temp = validData[i];\n    validData[i] = validData[validData.length - i - 1];\n    validData[validData.length - i - 1] = temp;\n}", 
                "normalized_code_snippet": "for (int i = 0; i < validData.length / 2; i++) {\n    int temp = validData[i];\n    validData[i] = validData[validData.length - i - 1];\n    validData[validData.length - i - 1] = temp;\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static Object[] reverse(Object[] arr) {\n        List<Object> list = Arrays.asList(arr);\n        Collections.reverse(list);\n        return list.toArray();\n    }", 
                "normalized_code_snippet": "List<Object> list = Arrays.asList(arr);\nCollections.reverse(list);"
            }
        ]
    }, 
    {
        "question_id": 1647260, 
        "title": "Java dynamic array sizes?", 
        "annotations": [
            {
                "intent": "", 
                "context": "List<xClass> mysclass = new ArrayList<xClass>();", 
                "normalized_context": "List<xClass> mysclass = new ArrayList<xClass>();", 
                "code_snippet": "myclass.add(new xClass());\nmyclass.add(new xClass());", 
                "normalized_code_snippet": "myclass.add(new xClass());\nmyclass.add(new xClass());"
            }, 
            {
                "intent": "", 
                "context": "import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Random;\nList<xClass> list = new ArrayList<xClass>();", 
                "normalized_context": null, 
                "code_snippet": "list.add( new xClass() );", 
                "normalized_code_snippet": "list.add(new xClass());"
            }
        ]
    }, 
    {
        "question_id": 1962181, 
        "title": "How do I delete specific characters from a particular String in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "s = s.substring(0, s.length() - 1)", 
                "normalized_code_snippet": "s = s.substring(0, s.length() - 1);"
            }, 
            {
                "intent": "", 
                "context": "String str = \"whatever\";", 
                "normalized_context": "String str = \"whatever\";", 
                "code_snippet": "str = str.replaceAll(\"[,.]\", \"\");", 
                "normalized_code_snippet": "str = str.replaceAll(\"[,.]\", \"\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "s = s.substring(0, s.length() - 1);", 
                "normalized_code_snippet": "s = s.substring(0, s.length() - 1);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "s = s.replace(\",\",\"\");", 
                "normalized_code_snippet": "s = s.replace(\",\", \"\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "s = s.replace(\".\",\"\");", 
                "normalized_code_snippet": "s = s.replace(\".\", \"\");"
            }
        ]
    }, 
    {
        "question_id": 2047003, 
        "title": "print arraylist element?", 
        "annotations": [
            {
                "intent": "print arraylist element?", 
                "context": "ArrayList<Dog> list = new ArrayList<Dog>();\n Dog e = new Dog();\n list.add(e);", 
                "normalized_context": "ArrayList<Dog> list = new ArrayList<Dog>();\nDog e = new Dog();\nlist.add(e);", 
                "code_snippet": "System.out.println(list.get(index))", 
                "normalized_code_snippet": "System.out.println(list.get(index));"
            }
        ]
    }, 
    {
        "question_id": 3914404, 
        "title": "How to get current moment in ISO 8601 format with date, hour, and minute?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "TimeZone tz = TimeZone.getTimeZone(\"UTC\");\nDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\ndf.setTimeZone(tz);\nString nowAsISO = df.format(new Date());", 
                "normalized_code_snippet": "TimeZone tz = TimeZone.getTimeZone(\"UTC\");\nDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\ndf.setTimeZone(tz);\nString nowAsISO = df.format(new Date());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "TimeZone tz = TimeZone.getTimeZone(\"UTC\");\nDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\"); // Quoted \"Z\" to indicate UTC, no timezone offset\ndf.setTimeZone(tz);\nString nowAsISO = df.format(new Date());", 
                "normalized_code_snippet": "TimeZone tz = TimeZone.getTimeZone(\"UTC\");\nDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");\ndf.setTimeZone(tz);\nString nowAsISO = df.format(new Date());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "thisMoment = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mmX\")\n                              .withZone(ZoneOffset.UTC)\n                              .format(Instant.now());", 
                "normalized_code_snippet": "thisMoment = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mmX\").withZone(ZoneOffset.UTC).format(Instant.now());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "thisMoment = String.format(\"%tFT%<tRZ\",\n                           Calendar.getInstance(TimeZone.getTimeZone(\"Z\")));", 
                "normalized_code_snippet": "thisMoment = String.format(\"%tFT%<tRZ\", Calendar.getInstance(TimeZone.getTimeZone(\"Z\")));"
            }
        ]
    }, 
    {
        "question_id": 16425127, 
        "title": "How to use Collections.sort() in JAVA ? (Specific situation)", 
        "annotations": [
            {
                "intent": "", 
                "context": "class RecipeCompare implements Comparator<Recipe> {\n\n    @Override\n    public int compare(Recipe o1, Recipe o2) {\n        // write comparison logic here like below , it's just a sample\n        return o1.getID().compareTo(o2.getID());\n    }\n}", 
                "normalized_context": "class RecipeCompare implements Comparator<Recipe> {\n\n    @Override\n    public int compare(Recipe o1, Recipe o2) {\n        return o1.getID().compareTo(o2.getID());\n    }\n}", 
                "code_snippet": "Collections.sort(recipes,new RecipeCompare());", 
                "normalized_code_snippet": "Collections.sort(recipes, new RecipeCompare());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(recipes, (Recipe r1, Recipe r2) ->\nr1.getID().compareTo(r2.getID()));", 
                "normalized_code_snippet": "Collections.sort(recipes, (Recipe r1, Recipe r2) -> r1.getID().compareTo(r2.getID()));"
            }
        ]
    }, 
    {
        "question_id": 7693994, 
        "title": "How to convert ASCII code (0-255) to a String of the associated character?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Character.toString ((char) i);", 
                "normalized_code_snippet": "Character.toString((char) i);"
            }
        ]
    }, 
    {
        "question_id": 5283444, 
        "title": "Convert array of strings into a string in Java", 
        "annotations": [
            {
                "intent": "Convert array of strings into a string in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String str = Arrays.toString(arr);", 
                "normalized_code_snippet": "String str = Arrays.toString(arr);"
            }, 
            {
                "intent": "Convert array of strings into a string in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "StringBuilder builder = new StringBuilder();\nfor(String s : arr) {\n    builder.append(s);\n}\nString str = builder.toString();", 
                "normalized_code_snippet": "StringBuilder builder = new StringBuilder();\nfor (String s : arr) {\n    builder.append(s);\n}\nString str = builder.toString();"
            }, 
            {
                "intent": "Convert array of strings into a string in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String str = String.join(\",\", arr);", 
                "normalized_code_snippet": "String str = String.join(\",\", arr);"
            }, 
            {
                "intent": "Convert array of strings into a string in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String joinedString = StringUtils.join(new Object[]{\"a\", \"b\", 1}, \"-\");", 
                "normalized_code_snippet": "String joinedString = StringUtils.join(new Object[] { \"a\", \"b\", 1 }, \"-\");"
            }, 
            {
                "intent": "Convert array of strings into a string in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Joiner.on(\", \").skipNulls().join(\"Harry\", null, \"Ron\", \"Hermione\");", 
                "normalized_code_snippet": "Joiner.on(\", \").skipNulls().join(\"Harry\", null, \"Ron\", \"Hermione\");"
            }, 
            {
                "intent": "Convert array of strings into a string in Java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String.join(\", \", \"Harry\", \"Ron\", \"Hermione\");", 
                "normalized_code_snippet": "String.join(\", \", \"Harry\", \"Ron\", \"Hermione\");"
            }
        ]
    }, 
    {
        "question_id": 5927109, 
        "title": "Sort objects in ArrayList by date?", 
        "annotations": [
            {
                "intent": "Sort objects in ArrayList by date?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(myList, new Comparator<MyObject>() {\n  public int compare(MyObject o1, MyObject o2) {\n      return o1.getDateTime().compareTo(o2.getDateTime());\n  }\n});", 
                "normalized_code_snippet": "Collections.sort(myList, new Comparator<MyObject>() {\n\n    public int compare(MyObject o1, MyObject o2) {\n        return o1.getDateTime().compareTo(o2.getDateTime());\n    }\n});"
            }, 
            {
                "intent": "Sort objects in ArrayList by date?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(myList, new Comparator<MyObject>() {\n  public int compare(MyObject o1, MyObject o2) {\n      if (o1.getDateTime() == null || o2.getDateTime() == null)\n        return 0;\n      return o1.getDateTime().compareTo(o2.getDateTime());\n  }\n});", 
                "normalized_code_snippet": "Collections.sort(myList, new Comparator<MyObject>() {\n\n    public int compare(MyObject o1, MyObject o2) {\n        if (o1.getDateTime() == null || o2.getDateTime() == null)\n            return 0;\n        return o1.getDateTime().compareTo(o2.getDateTime());\n    }\n});"
            }, 
            {
                "intent": "Sort objects in ArrayList by date?", 
                "context": "public static class MyObject implements Comparable<MyObject> {\n\n  private Date dateTime;\n\n  public Date getDateTime() {\n    return dateTime;\n  }\n\n  public void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n  }\n\n  @Override\n  public int compareTo(MyObject o) {\n    return getDateTime().compareTo(o.getDateTime());\n  }\n}", 
                "normalized_context": "public static class MyObject implements Comparable<MyObject> {\n\n    private Date dateTime;\n\n    public Date getDateTime() {\n        return dateTime;\n    }\n\n    public void setDateTime(Date datetime) {\n        this.dateTime = datetime;\n    }\n\n    @Override\n    public int compareTo(MyObject o) {\n        return getDateTime().compareTo(o.getDateTime());\n    }\n}", 
                "code_snippet": "Collections.sort(myList);", 
                "normalized_code_snippet": "Collections.sort(myList);"
            }, 
            {
                "intent": "Sort objects in ArrayList by date?", 
                "context": "public static class MyObject implements Comparable<MyObject> {\n\n  private Date dateTime;\n\n  public Date getDateTime() {\n    return dateTime;\n  }\n\n  public void setDateTime(Date datetime) {\n    this.dateTime = datetime;\n  }\n\n  @Override\n  public int compareTo(MyObject o) {\n    if (getDateTime() == null || o.getDateTime() == null)\n      return 0;\n    return getDateTime().compareTo(o.getDateTime());\n  }\n}", 
                "normalized_context": "public static class MyObject implements Comparable<MyObject> {\n\n    private Date dateTime;\n\n    public Date getDateTime() {\n        return dateTime;\n    }\n\n    public void setDateTime(Date datetime) {\n        this.dateTime = datetime;\n    }\n\n    @Override\n    public int compareTo(MyObject o) {\n        if (getDateTime() == null || o.getDateTime() == null)\n            return 0;\n        return getDateTime().compareTo(o.getDateTime());\n    }\n}", 
                "code_snippet": "Collections.sort(myList);", 
                "normalized_code_snippet": "Collections.sort(myList);"
            }, 
            {
                "intent": "Sort objects in ArrayList by date?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Collections.sort(myList, new Comparator<MyObject>() {\n    public int compare(MyObject o1, MyObject o2) {\n        return o1.getDateTime().lt(o2.getDateTime()) ? -1 : 1;\n    }\n});", 
                "normalized_code_snippet": "Collections.sort(myList, new Comparator<MyObject>() {\n\n    public int compare(MyObject o1, MyObject o2) {\n        return o1.getDateTime().lt(o2.getDateTime()) ? -1 : 1;\n    }\n});"
            }
        ]
    }, 
    {
        "question_id": 4377842, 
        "title": "How can I convert integer into float in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "float z = (float) x / y;", 
                "normalized_code_snippet": "float z = (float) x / y;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "float z = x / (float) y;", 
                "normalized_code_snippet": "float z = x / (float) y;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "float z = (float) x / (float) y;", 
                "normalized_code_snippet": "float z = (float) x / (float) y;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "float f = (float) x / y;", 
                "normalized_code_snippet": "float f = (float) x / y;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "double d = (double) x / y;", 
                "normalized_code_snippet": "double d = (double) x / y;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "float z = x * 1.0 / y;", 
                "normalized_code_snippet": "float z = x * 1.0 / y;"
            }
        ]
    }, 
    {
        "question_id": 2564298, 
        "title": "Java: how to initialize String[]?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[] errorSoon = new String[100]; // <--initialized statement", 
                "normalized_code_snippet": "String[] errorSoon = new String[100];"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[] errorSoon = {\"Hello\", \"World\"};", 
                "normalized_code_snippet": "String[] errorSoon = { \"Hello\", \"World\" };"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[] errorSoon = new String[2];\nerrorSoon[0] = \"Hello\";\nerrorSoon[1] = \"World\";", 
                "normalized_code_snippet": "String[] errorSoon = new String[2];\nerrorSoon[0] = \"Hello\";\nerrorSoon[1] = \"World\";"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[] args = new String[]{\"firstarg\", \"secondarg\", \"thirdarg\"};", 
                "normalized_code_snippet": "String[] args = new String[] { \"firstarg\", \"secondarg\", \"thirdarg\" };"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[] errorSoon = { \"foo\", \"bar\" };", 
                "normalized_code_snippet": "String[] errorSoon = { \"foo\", \"bar\" };"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[] errorSoon = new String[2];\nerrorSoon[0] = \"foo\";\nerrorSoon[1] = \"bar\";", 
                "normalized_code_snippet": "String[] errorSoon = new String[2];\nerrorSoon[0] = \"foo\";\nerrorSoon[1] = \"bar\";"
            }
        ]
    }, 
    {
        "question_id": 4240080, 
        "title": "Generating all permutations of a given string", 
        "annotations": [
            {
                "intent": "Generating all permutations of a given string", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static void permutation(String str) { \n    permutation(\"\", str); \n}\n\nprivate static void permutation(String prefix, String str) {\n    int n = str.length();\n    if (n == 0) System.out.println(prefix);\n    else {\n        for (int i = 0; i < n; i++)\n            permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, n));\n    }\n}", 
                "normalized_code_snippet": "public static void permutation(String str) {\n    permutation(\"\", str);\n}\nprivate static void permutation(String prefix, String str) {\n    int n = str.length();\n    if (n == 0)\n        System.out.println(prefix);\n    else {\n        for (int i = 0; i < n; i++) permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n));\n    }\n}"
            }, 
            {
                "intent": "Generating all permutations of a given string", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "/**\n * List permutation of a string\n * \n * @param s the input string\n * @return  the list of permutation\n */\npublic static ArrayList<String> permutation(String s) {\n    // The result\n    ArrayList<String> res = new ArrayList<String>();\n    // If input string's length is 1, return {s}\n    if (s.length() == 1) {\n        res.add(s);\n    } else if (s.length() > 1) {\n        int lastIndex = s.length() - 1;\n        // Find out the last character\n        String last = s.substring(lastIndex);\n        // Rest of the string\n        String rest = s.substring(0, lastIndex);\n        // Perform permutation on the rest string and\n        // merge with the last character\n        res = merge(permutation(rest), last);\n    }\n    return res;\n}\n\n/**\n * @param list a result of permutation, e.g. {\"ab\", \"ba\"}\n * @param c    the last character\n * @return     a merged new list, e.g. {\"cab\", \"acb\" ... }\n */\npublic static ArrayList<String> merge(ArrayList<String> list, String c) {\n    ArrayList<String> res = new ArrayList<String>();\n    // Loop through all the string in the list\n    for (String s : list) {\n        // For each string, insert the last character to all possible postions\n        // and add them to the new list\n        for (int i = 0; i <= s.length(); ++i) {\n            String ps = new StringBuffer(s).insert(i, c).toString();\n            res.add(ps);\n        }\n    }\n    return res;\n}", 
                "normalized_code_snippet": "public static ArrayList<String> permutation(String s) {\n    ArrayList<String> res = new ArrayList<String>();\n    if (s.length() == 1) {\n        res.add(s);\n    } else if (s.length() > 1) {\n        int lastIndex = s.length() - 1;\n        String last = s.substring(lastIndex);\n        String rest = s.substring(0, lastIndex);\n        res = merge(permutation(rest), last);\n    }\n    return res;\n}\npublic static ArrayList<String> merge(ArrayList<String> list, String c) {\n    ArrayList<String> res = new ArrayList<String>();\n    for (String s : list) {\n        for (int i = 0; i <= s.length(); ++i) {\n            String ps = new StringBuffer(s).insert(i, c).toString();\n            res.add(ps);\n        }\n    }\n    return res;\n}"
            }
        ]
    }, 
    {
        "question_id": 14145235, 
        "title": "Java ArrayList - Check if list is empty", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "listName.isEmpty()", 
                "normalized_code_snippet": "listName.isEmpty();"
            }
        ]
    }, 
    {
        "question_id": 11409621, 
        "title": "Creating a triangle with for loops", 
        "annotations": [
            {
                "intent": "Creating a triangle with for loops", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "for (int i = 0; i < 5; i++) \n  System.out.println(\"    *********\".substring(i, 5 + 2*i));", 
                "normalized_code_snippet": "for (int i = 0; i < 5; i++) System.out.println(\"    *********\".substring(i, 5 + 2 * i));"
            }, 
            {
                "intent": "Creating a triangle with for loops", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "for (int i=1; i<10; i += 2)\n{\n    for (int k=0; k < (4 - i / 2); k++)\n    {\n        System.out.print(\" \");\n    }\n    for (int j=0; j<i; j++)\n    {\n        System.out.print(\"*\");\n    }\n    System.out.println(\"\");\n}", 
                "normalized_code_snippet": "for (int i = 1; i < 10; i += 2) {\n    for (int k = 0; k < (4 - i / 2); k++) {\n        System.out.print(\" \");\n    }\n    for (int j = 0; j < i; j++) {\n        System.out.print(\"*\");\n    }\n    System.out.println(\"\");\n}"
            }, 
            {
                "intent": "Creating a triangle with for loops", 
                "context": "public void printTriangleLine(int rowNumber) {\n    printSequence(\" \", 5 - rowNumber);\n    printSequence(\"*\", 2 * rowNumber + 1);\n    System.out.println(); \n}", 
                "normalized_context": "printSequence(\" \", 5 - rowNumber);\nprintSequence(\"*\", 2 * rowNumber + 1);\nSystem.out.println();", 
                "code_snippet": "public void drawTriangle() {\n    for(int i=0; i<5; i++) {\n        printTriangleLine(i);\n    }\n}", 
                "normalized_code_snippet": "for (int i = 0; i < 5; i++) {\n    printTriangleLine(i);\n}"
            }
        ]
    }, 
    {
        "question_id": 3395286, 
        "title": "Remove last character of a StringBuilder?", 
        "annotations": [
            {
                "intent": "Remove last character of a StringBuilder?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String prefix = \"\";\nfor (String serverId : serverIds) {\n  sb.append(prefix);\n  prefix = \",\";\n  sb.append(serverId);\n}", 
                "normalized_code_snippet": "String prefix = \"\";\nfor (String serverId : serverIds) {\n    sb.append(prefix);\n    prefix = \",\";\n    sb.append(serverId);\n}"
            }, 
            {
                "intent": "Remove last character of a StringBuilder?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "sb.setLength(sb.length() - 1);", 
                "normalized_code_snippet": "sb.setLength(sb.length() - 1);"
            }, 
            {
                "intent": "Remove last character of a StringBuilder?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "if (sb.length() > 0) {\n   sb.setLength(sb.length() - 1);\n}", 
                "normalized_code_snippet": "if (sb.length() > 0) {\n    sb.setLength(sb.length() - 1);\n}"
            }, 
            {
                "intent": "Remove last character of a StringBuilder?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "sb.setLength(Math.max(sb.length() - 1, 0));", 
                "normalized_code_snippet": "sb.setLength(Math.max(sb.length() - 1, 0));"
            }, 
            {
                "intent": "Remove last character of a StringBuilder?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "sb.deleteCharAt(sb.length()-1)", 
                "normalized_code_snippet": "sb.deleteCharAt(sb.length() - 1);"
            }
        ]
    }, 
    {
        "question_id": 7522022, 
        "title": "How to delete stuff printed to console by System.out.println()?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.print(\"\\b\\b\\b\\b\\b\");", 
                "normalized_code_snippet": "System.out.print(\"\\b\\b\\b\\b\\b\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Runtime.getRuntime().exec(\"cls\");", 
                "normalized_code_snippet": "Runtime.getRuntime().exec(\"cls\");"
            }, 
            {
                "intent": "", 
                "context": "int count = 1;", 
                "normalized_context": "int count = 1;", 
                "code_snippet": "System.out.print(String.format(\"\\033[%dA\",count)); // Move up\nSystem.out.print(\"\\033[2K\"); // Erase line content", 
                "normalized_code_snippet": "System.out.print(String.format(\"\\033[%dA\", count));\nSystem.out.print(\"\\033[2K\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.print(String.format(\"\\033[2J\"));", 
                "normalized_code_snippet": "System.out.print(String.format(\"\\033[2J\"));"
            }, 
            {
                "intent": "", 
                "context": "System.out.print(\"hello\");\nThread.sleep(1000); // Just to give the user a chance to see \"hello\".", 
                "normalized_context": "System.out.print(\"hello\");\nThread.sleep(1000);", 
                "code_snippet": "System.out.print(\"\\b\\b\\b\\b\\b\");", 
                "normalized_code_snippet": "System.out.print(\"\\b\\b\\b\\b\\b\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.print(String.format(\"\\033[2J\"));", 
                "normalized_code_snippet": "System.out.print(String.format(\"\\033[2J\"));"
            }
        ]
    }, 
    {
        "question_id": 17940200, 
        "title": "How to find the duration of difference between two dates in java?", 
        "annotations": [
            {
                "intent": "find the duration of difference between two dates", 
                "context": "Date startDate = // Set start date\nDate endDate   = // Set end date", 
                "normalized_context": null, 
                "code_snippet": "long duration  = endDate.getTime() - startDate.getTime();", 
                "normalized_code_snippet": "long duration = endDate.getTime() - startDate.getTime();"
            }, 
            {
                "intent": "find the duration of difference between two dates", 
                "context": "Date dt2 = new DateAndTime().getCurrentDateTime();", 
                "normalized_context": "Date dt2 = new DateAndTime().getCurrentDateTime();", 
                "code_snippet": "long diff = dt2.getTime() - dt1.getTime();", 
                "normalized_code_snippet": "long diff = dt2.getTime() - dt1.getTime();"
            }, 
            {
                "intent": "find the duration of difference between two dates", 
                "context": "DateTime startTime, endTime;", 
                "normalized_context": "DateTime startTime, endTime;", 
                "code_snippet": "Period p = new Period(startTime, endTime);\nlong hours = p.getHours();\nlong minutes = p.getMinutes();", 
                "normalized_code_snippet": "Period p = new Period(startTime, endTime);\nlong hours = p.getHours();\nlong minutes = p.getMinutes();"
            }, 
            {
                "intent": "find the duration of difference between two dates", 
                "context": "Instant start, end;//", 
                "normalized_context": "Instant start, end;", 
                "code_snippet": "Duration dur = Duration.between(start, stop);\nlong hours = dur.toHours();\nlong minutes = dur.toMinutes();", 
                "normalized_code_snippet": "Duration dur = Duration.between(start, stop);\nlong hours = dur.toHours();\nlong minutes = dur.toMinutes();"
            }
        ]
    }, 
    {
        "question_id": 248562, 
        "title": "When using Spring Security, what is the proper way to obtain current username (i.e. SecurityContext) information in a bean?", 
        "annotations": [
            {
                "intent": "", 
                "context": "@RequestMapping(method = RequestMethod.GET)   \n public ModelAndView showResults(final HttpServletRequest request, Principal principal) {", 
                "normalized_context": null, 
                "code_snippet": "final String currentUser = principal.getName();", 
                "normalized_code_snippet": "final String currentUser = principal.getName();"
            }
        ]
    }, 
    {
        "question_id": 3605237, 
        "title": "How print out the contents of a HashMap<String, String> in ascending order based on its values?", 
        "annotations": [
            {
                "intent": "", 
                "context": "Map<String, String> map = getMyMap();", 
                "normalized_context": "Map<String, String> map = getMyMap();", 
                "code_snippet": "List<String> keys = new ArrayList<String>(map.keySet());\nCollections.sort(keys, someComparator);\nfor (String key: keys) {\n    System.out.println(key + \": \" + map.get(key));\n}", 
                "normalized_code_snippet": "List<String> keys = new ArrayList<String>(map.keySet());\nCollections.sort(keys, someComparator);\nfor (String key : keys) {\n    System.out.println(key + \": \" + map.get(key));\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Map<String, String> reversedMap = new TreeMap<String, String>(codes);\n\n//then you just access the reversedMap however you like...\nfor (Map.Entry entry : reversedMap.entrySet()) {\n    System.out.println(entry.getKey() + \", \" + entry.getValue());\n}", 
                "normalized_code_snippet": "Map<String, String> reversedMap = new TreeMap<String, String>(codes);\nfor (Map.Entry entry : reversedMap.entrySet()) {\n    System.out.println(entry.getKey() + \", \" + entry.getValue());\n}"
            }
        ]
    }, 
    {
        "question_id": 454908, 
        "title": "Split Java String by New Line", 
        "annotations": [
            {
                "intent": "Split Java String by New Line", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String lines[] = string.split(\"\\\\r?\\\\n\");", 
                "normalized_code_snippet": "String[] lines = string.split(\"\\\\r?\\\\n\");"
            }, 
            {
                "intent": "Split Java String by New Line", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String.split(\"[\\\\r\\\\n]+\")", 
                "normalized_code_snippet": "String.split(\"[\\\\r\\\\n]+\");"
            }
        ]
    }, 
    {
        "question_id": 18915075, 
        "title": "Java: Convert String to TimeStamp", 
        "annotations": [
            {
                "intent": "", 
                "context": "SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSS\");", 
                "normalized_context": "SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSS\");", 
                "code_snippet": "Date parsedDate = dateFormat.parse(yourString);\n    Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());", 
                "normalized_code_snippet": "Date parsedDate = dateFormat.parse(yourString);\nTimestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());"
            }, 
            {
                "intent": "", 
                "context": "DateFormat formatter;\n      formatter = new SimpleDateFormat(\"dd/MM/yyyy\");", 
                "normalized_context": "DateFormat formatter;\nformatter = new SimpleDateFormat(\"dd/MM/yyyy\");", 
                "code_snippet": "Date date = formatter.parse(str_date);\n      java.sql.Timestamp timeStampDate = new Timestamp(date.getTime());", 
                "normalized_code_snippet": "Date date = formatter.parse(str_date);\njava.sql.Timestamp timeStampDate = new Timestamp(date.getTime());"
            }
        ]
    }, 
    {
        "question_id": 4266756, 
        "title": "Can we make unsigned byte in Java", 
        "annotations": [
            {
                "intent": "", 
                "context": "int i = 200; // 0000 0000 0000 0000 0000 0000 1100 1000 (200)\nbyte b = (byte) 200; // 1100 1000 (-56 by Java specification, 200 by convention)", 
                "normalized_context": "int i = 200;\nbyte b = (byte) 200;", 
                "code_snippet": "System.out.println(b & 0xFF); // \"200\"", 
                "normalized_code_snippet": "System.out.println(b & 0xFF);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static int unsignedToBytes(byte b) {\n    return b & 0xFF;\n  }", 
                "normalized_code_snippet": "return b & 0xFF;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "void printUnsignedByte(byte b) {\n    int unsignedByte = b & 0xFF;\n    System.out.println(unsignedByte); // \"200\"\n}", 
                "normalized_code_snippet": "int unsignedByte = b & 0xFF;\nSystem.out.println(unsignedByte);"
            }
        ]
    }, 
    {
        "question_id": 88838, 
        "title": "How to convert Strings to and from UTF8 byte arrays in Java", 
        "annotations": [
            {
                "intent": "", 
                "context": "String s = \"some text here\";", 
                "normalized_context": "String s = \"some text here\";", 
                "code_snippet": "byte[] b = s.getBytes(\"UTF-8\");", 
                "normalized_code_snippet": "byte[] b = s.getBytes(\"UTF-8\");"
            }, 
            {
                "intent": "", 
                "context": "byte[] b = {(byte) 99, (byte)97, (byte)116};", 
                "normalized_context": "byte[] b = { (byte) 99, (byte) 97, (byte) 116 };", 
                "code_snippet": "String s = new String(b, \"US-ASCII\");", 
                "normalized_code_snippet": "String s = new String(b, \"US-ASCII\");"
            }, 
            {
                "intent": "", 
                "context": "import java.nio.charset.Charset;\n\nprivate final Charset UTF8_CHARSET = Charset.forName(\"UTF-8\");", 
                "normalized_context": null, 
                "code_snippet": "String decodeUTF8(byte[] bytes) {\n    return new String(bytes, UTF8_CHARSET);\n}", 
                "normalized_code_snippet": "return new String(bytes, UTF8_CHARSET);"
            }, 
            {
                "intent": "", 
                "context": "import java.nio.charset.Charset;\n\nprivate final Charset UTF8_CHARSET = Charset.forName(\"UTF-8\");", 
                "normalized_context": null, 
                "code_snippet": "byte[] encodeUTF8(String string) {\n    return string.getBytes(UTF8_CHARSET);\n}", 
                "normalized_code_snippet": "return string.getBytes(UTF8_CHARSET);"
            }
        ]
    }, 
    {
        "question_id": 7438612, 
        "title": "How to remove the last character from a string?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public String method(String str) {\n    if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == 'x') {\n        str = str.substring(0, str.length() - 1);\n    }\n    return str;\n}", 
                "normalized_code_snippet": "if (str != null && str.length() > 0 && str.charAt(str.length() - 1) == 'x') {\n    str = str.substring(0, str.length() - 1);\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "private static String removeLastChar(String str) {\n    return str.substring(0, str.length() - 1);\n}", 
                "normalized_code_snippet": "return str.substring(0, str.length() - 1);"
            }, 
            {
                "intent": "", 
                "context": "import java.util.*;\nimport java.lang.*;\n\npublic class Main {\n    public static void main (String[] args) throws java.lang.Exception {\n        String s1 = \"Remove Last CharacterY\";\n        String s2 = \"Remove Last Character2\";\n        System.out.println(\"After removing s1==\" + removeLastChar(s1) + \"==\");\n        System.out.println(\"After removing s2==\" + removeLastChar(s2) + \"==\");\n\n    }", 
                "normalized_context": null, 
                "code_snippet": "private static String removeLastChar(String str) {\n        return str.substring(0, str.length() - 1);\n    }", 
                "normalized_code_snippet": "return str.substring(0, str.length() - 1);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "\"aaabcd\".replaceFirst(\".$\",\"\"); //=> aaabc", 
                "normalized_code_snippet": "\"aaabcd\".replaceFirst(\".$\", \"\");"
            }
        ]
    }, 
    {
        "question_id": 2839321, 
        "title": "Connect Java to a MySQL database", 
        "annotations": [
            {
                "intent": "Connect Java to a MySQL database", 
                "context": "String url = \"jdbc:mysql://localhost:3306/javabase\";\nString username = \"java\";\nString password = \"password\";", 
                "normalized_context": "String url = \"jdbc:mysql://localhost:3306/javabase\";\nString username = \"java\";\nString password = \"password\";", 
                "code_snippet": "try (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println(\"Database connected!\");\n} catch (SQLException e) {\n    throw new IllegalStateException(\"Cannot connect the database!\", e);\n}", 
                "normalized_code_snippet": "try (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println(\"Database connected!\");\n} catch (SQLException e) {\n    throw new IllegalStateException(\"Cannot connect the database!\", e);\n}"
            }, 
            {
                "intent": "Connect Java to a MySQL database", 
                "context": "Context context = new InitialContext();\nDataSource dataSource = (DataSource) context.lookup(\"java:comp/env/jdbc/myDB\");", 
                "normalized_context": "Context context = new InitialContext();\nDataSource dataSource = (DataSource) context.lookup(\"java:comp/env/jdbc/myDB\");", 
                "code_snippet": "Connection conn = dataSource.getConnection();", 
                "normalized_code_snippet": "Connection conn = dataSource.getConnection();"
            }, 
            {
                "intent": "Connect Java to a MySQL database", 
                "context": "MysqlDataSource dataSource = new MysqlDataSource();\ndataSource.setUser(\"scott\");\ndataSource.setPassword(\"tiger\");\ndataSource.setServerName(\"myDBHost.example.org\");", 
                "normalized_context": "MysqlDataSource dataSource = new MysqlDataSource();\ndataSource.setUser(\"scott\");\ndataSource.setPassword(\"tiger\");\ndataSource.setServerName(\"myDBHost.example.org\");", 
                "code_snippet": "Connection conn = dataSource.getConnection();", 
                "normalized_code_snippet": "Connection conn = dataSource.getConnection();"
            }, 
            {
                "intent": "Connect Java to a MySQL database", 
                "context": "// init database constants\nprivate static final String DATABASE_DRIVER = \"com.mysql.jdbc.Driver\";\nprivate static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/database_name\";\nprivate static final String USERNAME = \"root\";\nprivate static final String PASSWORD = \"\";\nprivate static final String MAX_POOL = \"250\"; // set your own limit\n// init connection object\nprivate Connection connection;\n// init properties object\nprivate Properties properties;\n// create properties\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty(\"user\", USERNAME);\n        properties.setProperty(\"password\", PASSWORD);\n        properties.setProperty(\"MaxPooledStatements\", MAX_POOL);\n    }\n    return properties;\n}", 
                "normalized_context": "private static final String DATABASE_DRIVER = \"com.mysql.jdbc.Driver\";\nprivate static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/database_name\";\nprivate static final String USERNAME = \"root\";\nprivate static final String PASSWORD = \"\";\nprivate static final String MAX_POOL = \"250\";\nprivate Connection connection;\nprivate Properties properties;\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty(\"user\", USERNAME);\n        properties.setProperty(\"password\", PASSWORD);\n        properties.setProperty(\"MaxPooledStatements\", MAX_POOL);\n    }\n    return properties;\n}", 
                "code_snippet": "Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());", 
                "normalized_code_snippet": "Class.forName(DATABASE_DRIVER);\nconnection = DriverManager.getConnection(DATABASE_URL, getProperties());"
            }
        ]
    }, 
    {
        "question_id": 8444710, 
        "title": "Easiest way to check if a string is palindrome", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "if(s.equals(new StringBuilder(s).reverse().toString())) // is a palindrome.", 
                "normalized_code_snippet": "if (s.equals(new StringBuilder(s).reverse().toString())) {\n}"
            }, 
            {
                "intent": "", 
                "context": "protected static String removeJunk(String string) {\n    int i, len = string.length();\n    StringBuffer dest = new StringBuffer(len);\n    char c;\n\n    for (i = (len - 1); i >= 0; i--) {\n      c = string.charAt(i);\n      if (Character.isLetterOrDigit(c)) {\n        dest.append(c);\n      }\n    }\n\n    return dest.toString();\n  }\n\n  protected static String reverse(String string) {\n    StringBuffer sb = new StringBuffer(string);\n\n    return sb.reverse().toString();\n  }", 
                "normalized_context": "protected static String removeJunk(String string) {\n    int i, len = string.length();\n    StringBuffer dest = new StringBuffer(len);\n    char c;\n    for (i = (len - 1); i >= 0; i--) {\n        c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            dest.append(c);\n        }\n    }\n    return dest.toString();\n}\nprotected static String reverse(String string) {\n    StringBuffer sb = new StringBuffer(string);\n    return sb.reverse().toString();\n}", 
                "code_snippet": "String workingCopy = removeJunk(stringToTest);\n    String reversedCopy = reverse(workingCopy);\n\n    return reversedCopy.equalsIgnoreCase(workingCopy);", 
                "normalized_code_snippet": "String workingCopy = removeJunk(stringToTest);\nString reversedCopy = reverse(workingCopy);\nreturn reversedCopy.equalsIgnoreCase(workingCopy);"
            }
        ]
    }, 
    {
        "question_id": 513832, 
        "title": "How do I compare strings in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "new String(\"test\").equals(\"test\")", 
                "normalized_code_snippet": "new String(\"test\").equals(\"test\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Objects.equals(\"test\", new String(\"test\"))", 
                "normalized_code_snippet": "Objects.equals(\"test\", new String(\"test\"));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Objects.equals(null, \"test\")", 
                "normalized_code_snippet": "Objects.equals(null, \"test\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "fooString1.equals(fooString2);", 
                "normalized_code_snippet": "fooString1.equals(fooString2);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "nullString1.equals(nullString2);", 
                "normalized_code_snippet": "nullString1.equals(nullString2);"
            }
        ]
    }, 
    {
        "question_id": 332079, 
        "title": "In Java, how do I convert a byte array to a string of hex digits while keeping leading zeros?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String hexString = new String(Hex.encodeHex(messageDigest));", 
                "normalized_code_snippet": "String hexString = new String(Hex.encodeHex(messageDigest));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static String toHex(byte[] bytes) {\n    BigInteger bi = new BigInteger(1, bytes);\n    return String.format(\"%0\" + (bytes.length << 1) + \"X\", bi);\n}", 
                "normalized_code_snippet": "BigInteger bi = new BigInteger(1, bytes);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static String toHexString(byte[] bytes) {\n    StringBuilder hexString = new StringBuilder();\n\n    for (int i = 0; i < bytes.length; i++) {\n        String hex = Integer.toHexString(0xFF & bytes[i]);\n        if (hex.length() == 1) {\n            hexString.append('0');\n        }\n        hexString.append(hex);\n    }\n\n    return hexString.toString();\n}", 
                "normalized_code_snippet": "StringBuilder hexString = new StringBuilder();\nfor (int i = 0; i < bytes.length; i++) {\n    String hex = Integer.toHexString(0xFF & bytes[i]);\n    if (hex.length() == 1) {\n        hexString.append('0');\n    }\n    hexString.append(hex);\n}"
            }
        ]
    }, 
    {
        "question_id": 5993779, 
        "title": "Use String.split() with multiple delimiters", 
        "annotations": [
            {
                "intent": "Use String.split() with multiple delimiters", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[]tokens = pdfName.split(\"-|\\\\.\");", 
                "normalized_code_snippet": "String[] tokens = pdfName.split(\"-|\\\\.\");"
            }, 
            {
                "intent": "Use String.split() with multiple delimiters", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[] tokens=pdfName.split(\"\\\\W\");", 
                "normalized_code_snippet": "String[] tokens = pdfName.split(\"\\\\W\");"
            }
        ]
    }, 
    {
        "question_id": 2966334, 
        "title": "How do I set the colour of a label (coloured text) in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "label.setForeground(Color.RED)", 
                "normalized_code_snippet": "label.setForeground(Color.RED);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "frame.add(new JLabel(\"<html>Text color: <font color='red'>red</font></html>\"));", 
                "normalized_code_snippet": "frame.add(new JLabel(\"<html>Text color: <font color='red'>red</font></html>\"));"
            }, 
            {
                "intent": "", 
                "context": "JLabel title = new JLabel(\"I love stackoverflow!\", JLabel.CENTER);", 
                "normalized_context": "JLabel title = new JLabel(\"I love stackoverflow!\", JLabel.CENTER);", 
                "code_snippet": "title.setForeground(Color.white);", 
                "normalized_code_snippet": "title.setForeground(Color.white);"
            }, 
            {
                "intent": "", 
                "context": "JLabel label = new JLabel (\"Text Color: Red\");", 
                "normalized_context": "JLabel label = new JLabel(\"Text Color: Red\");", 
                "code_snippet": "label.setForeground (Color.red);", 
                "normalized_code_snippet": "label.setForeground(Color.red);"
            }
        ]
    }, 
    {
        "question_id": 4040001, 
        "title": "Creating random numbers with no duplicates", 
        "annotations": [
            {
                "intent": "Creating random numbers with no duplicates", 
                "context": "Random rng = new Random(); // Ideally just create one instance globally", 
                "normalized_context": "Random rng = new Random();", 
                "code_snippet": "Set<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded)\n{\n    Integer next = rng.nextInt(max) + 1;\n    // As we're adding to a set, this will automatically do a containment check\n    generated.add(next);\n}", 
                "normalized_code_snippet": "Set<Integer> generated = new LinkedHashSet<Integer>();\nwhile (generated.size() < numbersNeeded) {\n    Integer next = rng.nextInt(max) + 1;\n    generated.add(next);\n}"
            }, 
            {
                "intent": "Creating random numbers with no duplicates", 
                "context": "int size = 20;\nRandom rand = new Random();", 
                "normalized_context": "int size = 20;\nRandom rand = new Random();", 
                "code_snippet": "ArrayList<Integer> list = new ArrayList<Integer>(size);\n        for(int i = 1; i <= size; i++) {\n            list.add(i);\n        }\nwhile(list.size() > 0) {\n            int index = rand.nextInt(list.size());\n            System.out.println(\"Selected: \"+list.remove(index));\n        }", 
                "normalized_code_snippet": "ArrayList<Integer> list = new ArrayList<Integer>(size);\nfor (int i = 1; i <= size; i++) {\n    list.add(i);\n}\nwhile (list.size() > 0) {\n    int index = rand.nextInt(list.size());\n    System.out.println(\"Selected: \" + list.remove(index));\n}"
            }, 
            {
                "intent": "Creating random numbers with no duplicates", 
                "context": "Random randomGenerator = new Random();", 
                "normalized_context": "Random randomGenerator = new Random();", 
                "code_snippet": "ArrayList<Integer> numbers = new ArrayList<Integer>();\nwhile (numbers.size() < 4) {\n\n    int random = randomGenerator .nextInt(4);\n    if (!numbers.contains(random)) {\n        numbers.add(random);\n    }\n}", 
                "normalized_code_snippet": "ArrayList<Integer> numbers = new ArrayList<Integer>();\nwhile (numbers.size() < 4) {\n    int random = randomGenerator.nextInt(4);\n    if (!numbers.contains(random)) {\n        numbers.add(random);\n    }\n}"
            }
        ]
    }, 
    {
        "question_id": 109383, 
        "title": "Sort a Map<Key, Value> by values (Java)", 
        "annotations": [
            {
                "intent": "Sort a Map<Key, Value> by values (Java)", 
                "context": "import java.util.*;", 
                "normalized_context": "import java.util.*;", 
                "code_snippet": "public static <K, V extends Comparable<? super V>> Map<K, V> \n        sortByValue( Map<K, V> map )\n    {\n        List<Map.Entry<K, V>> list =\n            new LinkedList<Map.Entry<K, V>>( map.entrySet() );\n        Collections.sort( list, new Comparator<Map.Entry<K, V>>()\n        {\n            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )\n            {\n                return (o1.getValue()).compareTo( o2.getValue() );\n            }\n        } );\n\n        Map<K, V> result = new LinkedHashMap<K, V>();\n        for (Map.Entry<K, V> entry : list)\n        {\n            result.put( entry.getKey(), entry.getValue() );\n        }\n        return result;\n    }", 
                "normalized_code_snippet": "List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<K, V>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}"
            }, 
            {
                "intent": "Sort a Map<Key, Value> by values (Java)", 
                "context": "import java.util.*;", 
                "normalized_context": "import java.util.*;", 
                "code_snippet": "public static <K, V extends Comparable<? super V>> Map<K, V> \n    sortByValue( Map<K, V> map )\n{\n    List<Map.Entry<K, V>> list =\n        new LinkedList<>( map.entrySet() );\n    Collections.sort( list, new Comparator<Map.Entry<K, V>>()\n    {\n        @Override\n        public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )\n        {\n            return ( o1.getValue() ).compareTo( o2.getValue() );\n        }\n    } );\n\n    Map<K, V> result = new LinkedHashMap<>();\n    for (Map.Entry<K, V> entry : list)\n    {\n        result.put( entry.getKey(), entry.getValue() );\n    }\n    return result;\n}", 
                "normalized_code_snippet": "List<Map.Entry<K, V>> list = new LinkedList<>(map.entrySet());\nCollections.sort(list, new Comparator<Map.Entry<K, V>>() {\n\n    @Override\n    public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n        return (o1.getValue()).compareTo(o2.getValue());\n    }\n});\nMap<K, V> result = new LinkedHashMap<>();\nfor (Map.Entry<K, V> entry : list) {\n    result.put(entry.getKey(), entry.getValue());\n}"
            }, 
            {
                "intent": "Sort a Map<Key, Value> by values (Java)", 
                "context": "import java.util.*;", 
                "normalized_context": "import java.util.*;", 
                "code_snippet": "public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {\n    return map.entrySet()\n              .stream()\n              .sorted(Map.Entry.comparingByValue(/*Collections.reverseOrder()*/))\n              .collect(Collectors.toMap(\n                Map.Entry::getKey, \n                Map.Entry::getValue, \n                (e1, e2) -> e1, \n                LinkedHashMap::new\n              ));\n}", 
                "normalized_code_snippet": "return map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));"
            }, 
            {
                "intent": "Sort a Map<Key, Value> by values (Java)", 
                "context": "class ValueComparator implements Comparator<String> {\n    Map<String, Double> base;\n\n    public ValueComparator(Map<String, Double> base) {\n        this.base = base;\n    }\n\n    // Note: this comparator imposes orderings that are inconsistent with\n    // equals.\n    public int compare(String a, String b) {\n        if (base.get(a) >= base.get(b)) {\n            return -1;\n        } else {\n            return 1;\n        } // returning 0 would merge keys\n    }\n}\nHashMap<String, Double> map = new HashMap<String, Double>();\n        ValueComparator bvc = new ValueComparator(map);\n        TreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\n\n        map.put(\"A\", 99.5);\n        map.put(\"B\", 67.4);\n        map.put(\"C\", 67.4);\n        map.put(\"D\", 67.3);", 
                "normalized_context": "class ValueComparator implements Comparator<String> {\n\n    Map<String, Double> base;\n\n    public ValueComparator(Map<String, Double> base) {\n        this.base = base;\n    }\n\n    public int compare(String a, String b) {\n        if (base.get(a) >= base.get(b)) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n}\nHashMap<String, Double> map = new HashMap<String, Double>();\nValueComparator bvc = new ValueComparator(map);\nTreeMap<String, Double> sorted_map = new TreeMap<String, Double>(bvc);\nmap.put(\"A\", 99.5);\nmap.put(\"B\", 67.4);\nmap.put(\"C\", 67.4);\nmap.put(\"D\", 67.3);", 
                "code_snippet": "sorted_map.putAll(map);", 
                "normalized_code_snippet": "sorted_map.putAll(map);"
            }, 
            {
                "intent": "Sort a Map<Key, Value> by values (Java)", 
                "context": "valueComparator = Ordering.natural().onResultOf(Functions.forMap(map))", 
                "normalized_context": "valueComparator = Ordering.natural().onResultOf(Functions.forMap(map));", 
                "code_snippet": "map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);", 
                "normalized_code_snippet": "map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);"
            }, 
            {
                "intent": "Sort a Map<Key, Value> by values (Java)", 
                "context": "valueComparator = Ordering.from(comparator).onResultOf(Functions.forMap(map))", 
                "normalized_context": "valueComparator = Ordering.from(comparator).onResultOf(Functions.forMap(map));", 
                "code_snippet": "map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);", 
                "normalized_code_snippet": "map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);"
            }, 
            {
                "intent": "Sort a Map<Key, Value> by values (Java)", 
                "context": "valueComparator = Ordering.natural().onResultOf(Functions.forMap(map)).compound(Ordering.natural())\n", 
                "normalized_context": "valueComparator = Ordering.natural().onResultOf(Functions.forMap(map)).compound(Ordering.natural());", 
                "code_snippet": "map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);", 
                "normalized_code_snippet": "map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);"
            }
        ]
    }, 
    {
        "question_id": 811851, 
        "title": "How do I read input character-by-character in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "\n\n    private static void handleCharacters(Reader reader)\n            throws IOException {\n        int r;\n        while ((r = reader.read()) != -1) {\n            char ch = (char) r;\n            System.out.println(\"Do something with \" + ch);\n        }\n    }\n", 
                "normalized_code_snippet": "int r;\nwhile ((r = reader.read()) != -1) {\n    char ch = (char) r;\n    System.out.println(\"Do something with \" + ch);\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "BufferedReader reader = new BufferedReader(\n    new InputStreamReader(\n        new FileInputStream(file),\n        Charset.forName(\"UTF-8\")));\nint c;\nwhile((c = reader.read()) != -1) {\n  char character = (char) c;\n  // Do something with your character\n}", 
                "normalized_code_snippet": "BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charset.forName(\"UTF-8\")));\nint c;\nwhile ((c = reader.read()) != -1) {\n    char character = (char) c;\n}"
            }, 
            {
                "intent": "", 
                "context": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;", 
                "normalized_context": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;", 
                "code_snippet": "BufferedReader buffer = new BufferedReader(\n                 new InputStreamReader(System.in));\n        int c = 0;\n        while((c = buffer.read()) != -1) {\n            char character = (char) c;          \n            System.out.println(character);          \n        }", 
                "normalized_code_snippet": "BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));\nint c = 0;\nwhile ((c = buffer.read()) != -1) {\n    char character = (char) c;\n    System.out.println(character);\n}"
            }
        ]
    }, 
    {
        "question_id": 15758685, 
        "title": "How to write logs in text file when using java.util.logging.Logger", 
        "annotations": [
            {
                "intent": "", 
                "context": "Logger logger = Logger.getLogger(\"MyLog\");  \n    FileHandler fh;", 
                "normalized_context": "Logger logger = Logger.getLogger(\"MyLog\");\nFileHandler fh;", 
                "code_snippet": "fh = new FileHandler(\"C:/temp/test/MyLogFile.log\");  \n        logger.addHandler(fh);\n        SimpleFormatter formatter = new SimpleFormatter();  \n        fh.setFormatter(formatter);  \n\n        // the following statement is used to log any messages  \n        logger.info(\"My first log\");", 
                "normalized_code_snippet": "fh = new FileHandler(\"C:/temp/test/MyLogFile.log\");\nlogger.addHandler(fh);\nSimpleFormatter formatter = new SimpleFormatter();\nfh.setFormatter(formatter);\nlogger.info(\"My first log\");"
            }, 
            {
                "intent": "", 
                "context": "\n\n    public LoggingTester() {\n        //just to make our log file nicer :)\n        SimpleDateFormat format = new SimpleDateFormat(\"M-d_HHmmss\");\n        try {\n            fh = new FileHandler(\"C:/temp/test/MyLogFile_\"\n                + format.format(Calendar.getInstance().getTime()) + \".log\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        fh.setFormatter(new SimpleFormatter());\n        logger.addHandler(fh);\n    }\n\n    ", 
                "normalized_context": "public LoggingTester() {\n    SimpleDateFormat format = new SimpleDateFormat(\"M-d_HHmmss\");\n    try {\n        fh = new FileHandler(\"C:/temp/test/MyLogFile_\" + format.format(Calendar.getInstance().getTime()) + \".log\");\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    fh.setFormatter(new SimpleFormatter());\n    logger.addHandler(fh);\n}", 
                "code_snippet": "logger.info(\"info msg\");\n        logger.severe(\"error message\");\n        logger.fine(\"fine message\"); //won't show because to high level of logging", 
                "normalized_code_snippet": "logger.info(\"info msg\");\nlogger.severe(\"error message\");\nlogger.fine(\"fine message\");"
            }
        ]
    }, 
    {
        "question_id": 1391970, 
        "title": "How to convert a String to CharSequence?", 
        "annotations": [
            {
                "intent": "", 
                "context": "String s = \"Hello World!\";", 
                "normalized_context": "String s = \"Hello World!\";", 
                "code_snippet": "CharSequence cs = s;  // String is already a CharSequence", 
                "normalized_code_snippet": "CharSequence cs = s;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "CharSequence cs = new String(\"string\")", 
                "normalized_code_snippet": "CharSequence cs = new String(\"string\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "CharSequence cs = \"string\";", 
                "normalized_code_snippet": "CharSequence cs = \"string\";"
            }
        ]
    }, 
    {
        "question_id": 2843366, 
        "title": "How to add new elements to an array?", 
        "annotations": [
            {
                "intent": "", 
                "context": "List<String> where = new ArrayList<String>();", 
                "normalized_context": "List<String> where = new ArrayList<String>();", 
                "code_snippet": "where.add( ContactsContract.Contacts.HAS_PHONE_NUMBER+\"=1\" );\nwhere.add( ContactsContract.Contacts.IN_VISIBLE_GROUP+\"=1\" );", 
                "normalized_code_snippet": "where.add(ContactsContract.Contacts.HAS_PHONE_NUMBER + \"=1\");\nwhere.add(ContactsContract.Contacts.IN_VISIBLE_GROUP + \"=1\");"
            }, 
            {
                "intent": "", 
                "context": "import java.util.*;\n//....\n\nList<String> list = new ArrayList<String>();", 
                "normalized_context": null, 
                "code_snippet": "list.add(\"1\");\nlist.add(\"2\");\nlist.add(\"3\");", 
                "normalized_code_snippet": "list.add(\"1\");\nlist.add(\"2\");\nlist.add(\"3\");"
            }, 
            {
                "intent": "", 
                "context": "static <T> T[] append(T[] arr, T element) {\n    final int N = arr.length;\n    arr = Arrays.copyOf(arr, N + 1);\n    arr[N] = element;\n    return arr;\n}\nString[] arr = { \"1\", \"2\", \"3\" };", 
                "normalized_context": "static <T> T[] append(T[] arr, T element) {\n    final int N = arr.length;\n    arr = Arrays.copyOf(arr, N + 1);\n    arr[N] = element;\n    return arr;\n}\nString[] arr = { \"1\", \"2\", \"3\" };", 
                "code_snippet": "arr = append(arr, \"4\");", 
                "normalized_code_snippet": "arr = append(arr, \"4\");"
            }, 
            {
                "intent": "", 
                "context": "List<String> where = new ArrayList<String>();", 
                "normalized_context": "List<String> where = new ArrayList<String>();", 
                "code_snippet": "where.add(ContactsContract.Contacts.HAS_PHONE_NUMBER + \"=1\");\nwhere.add(ContactsContract.Contacts.IN_VISIBLE_GROUP + \"=1\");", 
                "normalized_code_snippet": "where.add(ContactsContract.Contacts.HAS_PHONE_NUMBER + \"=1\");\nwhere.add(ContactsContract.Contacts.IN_VISIBLE_GROUP + \"=1\");"
            }
        ]
    }, 
    {
        "question_id": 473446, 
        "title": "Java current machine name and logged in user?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.getProperty(\"user.name\"); //platform independent", 
                "normalized_code_snippet": "System.getProperty(\"user.name\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();\nSystem.out.println(\"Hostname of local machine: \" + localMachine.getHostName());", 
                "normalized_code_snippet": "java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();\nSystem.out.println(\"Hostname of local machine: \" + localMachine.getHostName());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.getProperty(\"user.name\");", 
                "normalized_code_snippet": "System.getProperty(\"user.name\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "InetAddress.getLocalHost().getHostName();", 
                "normalized_code_snippet": "InetAddress.getLocalHost().getHostName();"
            }
        ]
    }, 
    {
        "question_id": 8721262, 
        "title": "How to get file size in Java", 
        "annotations": [
            {
                "intent": "", 
                "context": "File f = new File(path);", 
                "normalized_context": "File f = new File(path);", 
                "code_snippet": "long length = f.length();", 
                "normalized_code_snippet": "long length = f.length();"
            }, 
            {
                "intent": "", 
                "context": "File f = new File(path);", 
                "normalized_context": "File f = new File(path);", 
                "code_snippet": "long size = f.length();", 
                "normalized_code_snippet": "long size = f.length();"
            }
        ]
    }, 
    {
        "question_id": 2525042, 
        "title": "How to convert a JSON string to a Map<String, String> with Jackson JSON", 
        "annotations": [
            {
                "intent": "", 
                "context": "ObjectMapper mapper = new ObjectMapper(); \n    File from = new File(\"albumnList.txt\"); \n    TypeReference<HashMap<String,Object>> typeRef \n            = new TypeReference<HashMap<String,Object>>() {};", 
                "normalized_context": "ObjectMapper mapper = new ObjectMapper();\nFile from = new File(\"albumnList.txt\");\nTypeReference<HashMap<String, Object>> typeRef = new TypeReference<HashMap<String, Object>>() {\n};", 
                "code_snippet": "HashMap<String,Object> o = mapper.readValue(from, typeRef);", 
                "normalized_code_snippet": "HashMap<String, Object> o = mapper.readValue(from, typeRef);"
            }, 
            {
                "intent": "", 
                "context": "Map<String, String> result;\nObjectMapper mapper;\nTypeFactory factory;\nMapType type;\n\nfactory = TypeFactory.defaultInstance();\ntype    = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper  = new ObjectMapper();", 
                "normalized_context": "Map<String, String> result;\nObjectMapper mapper;\nTypeFactory factory;\nMapType type;\nfactory = TypeFactory.defaultInstance();\ntype = factory.constructMapType(HashMap.class, String.class, String.class);\nmapper = new ObjectMapper();", 
                "code_snippet": "result  = mapper.readValue(data, type);", 
                "normalized_code_snippet": "result = mapper.readValue(data, type);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Map<String, String> result = new ObjectMapper().readValue(\n    data, TypeFactory.mapType(HashMap.class, String.class, String.class));", 
                "normalized_code_snippet": "Map<String, String> result = new ObjectMapper().readValue(data, TypeFactory.mapType(HashMap.class, String.class, String.class));"
            }, 
            {
                "intent": "", 
                "context": "HashMap<String,Object> props;", 
                "normalized_context": "HashMap<String, Object> props;", 
                "code_snippet": "props = new ObjectMapper().readValue(src, new TypeReference<HashMap<String,Object>>() {});", 
                "normalized_code_snippet": "props = new ObjectMapper().readValue(src, new TypeReference<HashMap<String, Object>>() {\n});"
            }, 
            {
                "intent": "", 
                "context": "HashMap<String,Object> props;", 
                "normalized_context": "HashMap<String, Object> props;", 
                "code_snippet": "props = (HashMap<String,Object>) new ObjectMapper().readValue(src, HashMap.class);", 
                "normalized_code_snippet": "props = (HashMap<String, Object>) new ObjectMapper().readValue(src, HashMap.class);"
            }, 
            {
                "intent": "", 
                "context": "HashMap<String,Object> props;\n@SuppressWarnings(\"unchecked\") // suppresses typed/untype mismatch warnings, which is harmless", 
                "normalized_context": null, 
                "code_snippet": "props = new ObjectMapper().readValue(src, HashMap.class);", 
                "normalized_code_snippet": "props = new ObjectMapper().readValue(src, HashMap.class);"
            }
        ]
    }, 
    {
        "question_id": 4404084, 
        "title": "Check if a value exists in ArrayList", 
        "annotations": [
            {
                "intent": "Check if a value exists in ArrayList", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "if (lista.contains(conta1)) {\n    System.out.println(\"Account found\");\n} else {\n    System.out.println(\"Account not found\");\n}", 
                "normalized_code_snippet": "if (lista.contains(conta1)) {\n    System.out.println(\"Account found\");\n} else {\n    System.out.println(\"Account not found\");\n}"
            }, 
            {
                "intent": "Check if a value exists in ArrayList", 
                "context": "EmployeeModel first = new EmployeeModel(\"Sameer\", \"Developer\", 25);\n    EmployeeModel second = new EmployeeModel(\"Jon\", \"Manager\", 30);\n    EmployeeModel third = new EmployeeModel(\"Priyanka\", \"Tester\", 24);\n\n    List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\n    employeeList.add(first);\n    employeeList.add(second);\n    employeeList.add(third);", 
                "normalized_context": "EmployeeModel first = new EmployeeModel(\"Sameer\", \"Developer\", 25);\nEmployeeModel second = new EmployeeModel(\"Jon\", \"Manager\", 30);\nEmployeeModel third = new EmployeeModel(\"Priyanka\", \"Tester\", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);", 
                "code_snippet": "System.out.println(\"Is checkUserOne Preasent = ? \"+employeeList.contains(checkUserOne));", 
                "normalized_code_snippet": "System.out.println(\"Is checkUserOne Preasent = ? \" + employeeList.contains(checkUserOne));"
            }, 
            {
                "intent": "Check if a value exists in ArrayList", 
                "context": "EmployeeModel first = new EmployeeModel(\"Sameer\", \"Developer\", 25);\n    EmployeeModel second = new EmployeeModel(\"Jon\", \"Manager\", 30);\n    EmployeeModel third = new EmployeeModel(\"Priyanka\", \"Tester\", 24);\n\n    List<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\n    employeeList.add(first);\n    employeeList.add(second);\n    employeeList.add(third);", 
                "normalized_context": "EmployeeModel first = new EmployeeModel(\"Sameer\", \"Developer\", 25);\nEmployeeModel second = new EmployeeModel(\"Jon\", \"Manager\", 30);\nEmployeeModel third = new EmployeeModel(\"Priyanka\", \"Tester\", 24);\nList<EmployeeModel> employeeList = new ArrayList<EmployeeModel>();\nemployeeList.add(first);\nemployeeList.add(second);\nemployeeList.add(third);", 
                "code_snippet": "System.out.println(\"Is checkUserTwo Preasent = ? \"+employeeList.contains(checkUserTwo));", 
                "normalized_code_snippet": "System.out.println(\"Is checkUserTwo Preasent = ? \" + employeeList.contains(checkUserTwo));"
            }
        ]
    }, 
    {
        "question_id": 1383797, 
        "title": "Java Hashmap: How to get key from value?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static <T, E> Set<T> getKeysByValue(Map<T, E> map, E value) {\n    Set<T> keys = new HashSet<T>();\n    for (Entry<T, E> entry : map.entrySet()) {\n        if (Objects.equals(value, entry.getValue())) {\n            keys.add(entry.getKey());\n        }\n    }\n    return keys;\n}", 
                "normalized_code_snippet": "Set<T> keys = new HashSet<T>();\nfor (Entry<T, E> entry : map.entrySet()) {\n    if (Objects.equals(value, entry.getValue())) {\n        keys.add(entry.getKey());\n    }\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static <T, E> T getKeyByValue(Map<T, E> map, E value) {\n    for (Entry<T, E> entry : map.entrySet()) {\n        if (Objects.equals(value, entry.getValue())) {\n            return entry.getKey();\n        }\n    }\n    return null;\n}", 
                "normalized_code_snippet": "for (Entry<T, E> entry : map.entrySet()) {\n    if (Objects.equals(value, entry.getValue())) {\n        return entry.getKey();\n    }\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static <T, E> Set<T> getKeysByValue(Map<T, E> map, E value) {\n    return map.entrySet()\n              .stream()\n              .filter(entry -> Objects.equals(entry.getValue(), value))\n              .map(Map.Entry::getKey)\n              .collect(Collectors.toSet());\n}", 
                "normalized_code_snippet": "return map.entrySet().stream().filter(entry -> Objects.equals(entry.getValue(), value)).map(Map.Entry::getKey).collect(Collectors.toSet());"
            }, 
            {
                "intent": "", 
                "context": "BiMap<Token, Character> tokenToChar = \n    ImmutableBiMap.of(Token.LEFT_BRACKET, '[', Token.LEFT_PARENTHESIS, '(');", 
                "normalized_context": "BiMap<Token, Character> tokenToChar = ImmutableBiMap.of(Token.LEFT_BRACKET, '[', Token.LEFT_PARENTHESIS, '(');", 
                "code_snippet": "Token token = tokenToChar.inverse().get('(');", 
                "normalized_code_snippet": "Token token = tokenToChar.inverse().get('(');"
            }, 
            {
                "intent": "", 
                "context": "Map<Integer, String> testMap = new HashMap<Integer, String>();\n        testMap.put(10, \"a\");\n        testMap.put(20, \"b\");\n        testMap.put(30, \"c\");\n        testMap.put(40, \"d\");", 
                "normalized_context": "Map<Integer, String> testMap = new HashMap<Integer, String>();\ntestMap.put(10, \"a\");\ntestMap.put(20, \"b\");\ntestMap.put(30, \"c\");\ntestMap.put(40, \"d\");", 
                "code_snippet": "for (Entry<Integer, String> entry : testMap.entrySet()) {\n            if (entry.getValue().equals(\"c\")) {\n                System.out.println(entry.getKey());\n            }\n        }", 
                "normalized_code_snippet": "for (Entry<Integer, String> entry : testMap.entrySet()) {\n    if (entry.getValue().equals(\"c\")) {\n        System.out.println(entry.getKey());\n    }\n}"
            }
        ]
    }, 
    {
        "question_id": 112503, 
        "title": "How do I remove objects from an array in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "List<String> list = new ArrayList<String>(Arrays.asList(array));\nlist.removeAll(Arrays.asList(\"a\"));\narray = list.toArray(array);", 
                "normalized_code_snippet": "List<String> list = new ArrayList<String>(Arrays.asList(array));\nlist.removeAll(Arrays.asList(\"a\"));\narray = list.toArray(array);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "List<String> list = new ArrayList<String>(Arrays.asList(array));\nlist.removeAll(Arrays.asList(\"a\"));\narray = list.toArray(new String[0]);", 
                "normalized_code_snippet": "List<String> list = new ArrayList<String>(Arrays.asList(array));\nlist.removeAll(Arrays.asList(\"a\"));\narray = list.toArray(new String[0]);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "List<String> list = new ArrayList<>();\nCollections.addAll(list, array);\nlist.removeAll(Arrays.asList(\"a\"));\narray = list.toArray(EMPTY_STRING_ARRAY);", 
                "normalized_code_snippet": "List<String> list = new ArrayList<>();\nCollections.addAll(list, array);\nlist.removeAll(Arrays.asList(\"a\"));\narray = list.toArray(EMPTY_STRING_ARRAY);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "List<String> list = new ArrayList<>();\nCollections.addAll(list, array);\nlist.removeAll(Arrays.asList(\"a\"));\narray = list.toArray(new String[list.size()]);", 
                "normalized_code_snippet": "List<String> list = new ArrayList<>();\nCollections.addAll(list, array);\nlist.removeAll(Arrays.asList(\"a\"));\narray = list.toArray(new String[list.size()]);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String[] filteredArray = Arrays.stream(array)\n    .filter(e -> !e.equals(foo)).toArray(String[]::new);", 
                "normalized_code_snippet": "String[] filteredArray = Arrays.stream(array).filter(e -> !e.equals(foo)).toArray(String[]::new);"
            }
        ]
    }, 
    {
        "question_id": 8557716, 
        "title": "How to return multiple values?", 
        "annotations": [
            {
                "intent": "", 
                "context": "public String name;\n    public String location;", 
                "normalized_context": "public String name;\npublic String location;", 
                "code_snippet": "String ar[] = new String[2];\n        ar[0]= name;\n        ar[1] =  location;\n        return ar; //returning two values at once", 
                "normalized_code_snippet": "String[] ar = new String[2];\nar[0] = name;\nar[1] = location;\nreturn ar;"
            }
        ]
    }, 
    {
        "question_id": 867194, 
        "title": "Java ResultSet how to check if there are any results", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "if (!resultSet.isBeforeFirst() ) {", 
                "normalized_code_snippet": "if (!resultSet.isBeforeFirst()) {\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "if (!resultSet.next() ) {", 
                "normalized_code_snippet": "if (!resultSet.next()) {\n}"
            }
        ]
    }, 
    {
        "question_id": 13386107, 
        "title": "How to remove single character from a String", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String result = str.substring(0, index) + str.substring(index+1);", 
                "normalized_code_snippet": "String result = str.substring(0, index) + str.substring(index + 1);"
            }, 
            {
                "intent": "", 
                "context": "String a = \"Cool\";", 
                "normalized_context": "String a = \"Cool\";", 
                "code_snippet": "a = a.replace(\"o\",\"\");", 
                "normalized_code_snippet": "a = a.replace(\"o\", \"\");"
            }
        ]
    }, 
    {
        "question_id": 4138364, 
        "title": "Java: How to convert List to Map", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Map<String, Item> map = \n    list.stream().collect(Collectors.toMap(Item::getKey, item -> item));", 
                "normalized_code_snippet": "Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Map<String, Item> map = \n            list.stream().collect(Collectors.toMap(Item::getKey, item -> item));", 
                "normalized_code_snippet": "Map<String, Item> map = list.stream().collect(Collectors.toMap(Item::getKey, item -> item));"
            }
        ]
    }, 
    {
        "question_id": 2627992, 
        "title": "Force Java timezone as GMT/UTC", 
        "annotations": [
            {
                "intent": "Force Java timezone as GMT/UTC", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.setProperty(\"user.timezone\", \"EST\");", 
                "normalized_code_snippet": "System.setProperty(\"user.timezone\", \"EST\");"
            }
        ]
    }, 
    {
        "question_id": 1448858, 
        "title": "How to color System.out.println output?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.println((char)27 + \"[34;43mBlue text with yellow background\");", 
                "normalized_code_snippet": "System.out.println((char) 27 + \"[34;43mBlue text with yellow background\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.println((char)27 + \"[31mThis text would show up red\" + (char)27 + \"[0m\");", 
                "normalized_code_snippet": "System.out.println((char) 27 + \"[31mThis text would show up red\" + (char) 27 + \"[0m\");"
            }
        ]
    }, 
    {
        "question_id": 1892765, 
        "title": "How to capitalize the first character of each word in a string", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "WordUtils.capitalize(str)", 
                "normalized_code_snippet": "WordUtils.capitalize(str);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static String capitalizeString(String string) {\n  char[] chars = string.toLowerCase().toCharArray();\n  boolean found = false;\n  for (int i = 0; i < chars.length; i++) {\n    if (!found && Character.isLetter(chars[i])) {\n      chars[i] = Character.toUpperCase(chars[i]);\n      found = true;\n    } else if (Character.isWhitespace(chars[i]) || chars[i]=='.' || chars[i]=='\\'') { // You can add other chars here\n      found = false;\n    }\n  }\n  return String.valueOf(chars);\n}", 
                "normalized_code_snippet": "char[] chars = string.toLowerCase().toCharArray();\nboolean found = false;\nfor (int i = 0; i < chars.length; i++) {\n    if (!found && Character.isLetter(chars[i])) {\n        chars[i] = Character.toUpperCase(chars[i]);\n        found = true;\n    } else if (Character.isWhitespace(chars[i]) || chars[i] == '.' || chars[i] == '\\'') {\n        found = false;\n    }\n}"
            }
        ]
    }, 
    {
        "question_id": 922528, 
        "title": "how to sort Map values by key in Java", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "SortedSet<String> keys = new TreeSet<String>(map.keySet());", 
                "normalized_code_snippet": "SortedSet<String> keys = new TreeSet<String>(map.keySet());"
            }, 
            {
                "intent": "", 
                "context": "Comparator<Foo> comparator = new Comparator<Foo>() {\n  public int compare(Foo o1, Foo o2) {\n    ...\n  }\n}", 
                "normalized_context": null, 
                "code_snippet": "SortedSet<Foo> keys = new TreeSet<Foo>(comparator);\nkeys.addAll(map.keySet());", 
                "normalized_code_snippet": "SortedSet<Foo> keys = new TreeSet<Foo>(comparator);\nkeys.addAll(map.keySet());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "List sortedKeys=new ArrayList(yourMap.keySet());\nCollections.sort(sortedKeys);", 
                "normalized_code_snippet": "List sortedKeys = new ArrayList(yourMap.keySet());\nCollections.sort(sortedKeys);"
            }, 
            {
                "intent": "", 
                "context": "Map<String, String> map = new HashMap<String, String>();", 
                "normalized_context": "Map<String, String> map = new HashMap<String, String>();", 
                "code_snippet": "Map<String, String> treeMap = new TreeMap<String, String>(map);", 
                "normalized_code_snippet": "Map<String, String> treeMap = new TreeMap<String, String>(map);"
            }
        ]
    }, 
    {
        "question_id": 240546, 
        "title": "Remove HTML tags from a String", 
        "annotations": [
            {
                "intent": "Remove HTML tags from a String", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static String html2text(String html) {\n    return Jsoup.parse(html).text();\n}\n", 
                "normalized_code_snippet": "return Jsoup.parse(html).text();"
            }, 
            {
                "intent": "Remove HTML tags from a String", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "android.text.Html.fromHtml(instruction).toString()", 
                "normalized_code_snippet": "android.text.Html.fromHtml(instruction).toString();"
            }, 
            {
                "intent": "Remove HTML tags from a String", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "replaceAll(\"\\\\<[^>]*>\",\"\")", 
                "normalized_code_snippet": "replaceAll(\"\\\\<[^>]*>\", \"\");"
            }
        ]
    }, 
    {
        "question_id": 75175, 
        "title": "Create instance of generic type in Java?", 
        "annotations": [
            {
                "intent": "Create instance of generic type in Java?", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "E createContents(Class<E> clazz)\n    {\n        return clazz.newInstance();\n    }", 
                "normalized_code_snippet": "return clazz.newInstance();"
            }, 
            {
                "intent": "Create instance of generic type in Java?", 
                "context": "public abstract class Foo<E> {\n\n  public E instance;  \n\n  public Foo() throws Exception {\n    instance = ((Class)((ParameterizedType)this.getClass().\n       getGenericSuperclass()).getActualTypeArguments()[0]).newInstance();\n    ...\n  }\n\n}", 
                "normalized_context": null, 
                "code_snippet": "new Foo<Bar>()", 
                "normalized_code_snippet": "new Foo<Bar>();"
            }, 
            {
                "intent": "Create instance of generic type in Java?", 
                "context": "interface Factory<E> {\n    E create();\n}\n\nclass SomeContainer<E> {\n    private final Factory<E> factory;\n    SomeContainer(Factory<E> factory) {\n        this.factory = factory;\n    }\n    ", 
                "normalized_context": null, 
                "code_snippet": "E createContents() {\n        return factory.create();\n    }", 
                "normalized_code_snippet": "return factory.create();"
            }
        ]
    }, 
    {
        "question_id": 2536873, 
        "title": "How can I set size of a button?", 
        "annotations": [
            {
                "intent": "", 
                "context": "JButton btn = new JButton(String.valueOf(i));", 
                "normalized_context": "JButton btn = new JButton(String.valueOf(i));", 
                "code_snippet": "btn.setPreferredSize(new Dimension(40, 40));", 
                "normalized_code_snippet": "btn.setPreferredSize(new Dimension(40, 40));"
            }, 
            {
                "intent": "", 
                "context": "btn = new JButton();", 
                "normalized_context": "btn = new JButton();", 
                "code_snippet": "btn.setPreferredSize(new Dimension(100, 100));", 
                "normalized_code_snippet": "btn.setPreferredSize(new Dimension(100, 100));"
            }, 
            {
                "intent": "", 
                "context": "btn = new JButton();", 
                "normalized_context": "btn = new JButton();", 
                "code_snippet": "btn.setPreferredSize(new Dimension(40, 40));", 
                "normalized_code_snippet": "btn.setPreferredSize(new Dimension(40, 40));"
            }
        ]
    }, 
    {
        "question_id": 4802887, 
        "title": "Gson: How to exclude specific fields from Serialization without annotations", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "private transient String name;", 
                "normalized_code_snippet": "private transient String name;"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "@Expose private Long id;\nGson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();", 
                "normalized_code_snippet": "@Expose\nprivate Long id;\nGson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();"
            }, 
            {
                "intent": "", 
                "context": "public class TestExclStrat implements ExclusionStrategy {\n\n        public boolean shouldSkipClass(Class<?> arg0) {\n            return false;\n        }\n\n        public boolean shouldSkipField(FieldAttributes f) {\n\n            return (f.getDeclaringClass() == Student.class && f.getName().equals(\"firstName\"))||\n            (f.getDeclaringClass() == Country.class && f.getName().equals(\"name\"));\n        }\n\n    }", 
                "normalized_context": "public class TestExclStrat implements ExclusionStrategy {\n\n    public boolean shouldSkipClass(Class<?> arg0) {\n        return false;\n    }\n\n    public boolean shouldSkipField(FieldAttributes f) {\n        return (f.getDeclaringClass() == Student.class && f.getName().equals(\"firstName\")) || (f.getDeclaringClass() == Country.class && f.getName().equals(\"name\"));\n    }\n}", 
                "code_snippet": "Gson gson = new GsonBuilder()\n        .setExclusionStrategies(new TestExclStrat())\n        //.serializeNulls() <-- uncomment to serialize NULL fields as well\n        .create();\n    Student src = new Student();\n    String json = gson.toJson(src);", 
                "normalized_code_snippet": "Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat()).create();\nStudent src = new Student();\nString json = gson.toJson(src);"
            }, 
            {
                "intent": "", 
                "context": "public class TestExclStrat implements ExclusionStrategy {\n\n        private Class<?> c;\n        private String fieldName;\n        public TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException\n        {\n            this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(\".\")));\n            this.fieldName = fqfn.substring(fqfn.lastIndexOf(\".\")+1);\n        }\n        public boolean shouldSkipClass(Class<?> arg0) {\n            return false;\n        }\n\n        public boolean shouldSkipField(FieldAttributes f) {\n\n            return (f.getDeclaringClass() == c && f.getName().equals(fieldName));\n        }\n\n    }", 
                "normalized_context": "public class TestExclStrat implements ExclusionStrategy {\n\n    private Class<?> c;\n\n    private String fieldName;\n\n    public TestExclStrat(String fqfn) throws SecurityException, NoSuchFieldException, ClassNotFoundException {\n        this.c = Class.forName(fqfn.substring(0, fqfn.lastIndexOf(\".\")));\n        this.fieldName = fqfn.substring(fqfn.lastIndexOf(\".\") + 1);\n    }\n\n    public boolean shouldSkipClass(Class<?> arg0) {\n        return false;\n    }\n\n    public boolean shouldSkipField(FieldAttributes f) {\n        return (f.getDeclaringClass() == c && f.getName().equals(fieldName));\n    }\n}", 
                "code_snippet": "Gson gson = new GsonBuilder()\n        .setExclusionStrategies(new TestExclStrat(\"in.naishe.test.Country.name\"))\n        //.serializeNulls()\n        .create();\n    Student src = new Student();\n    String json = gson.toJson(src);", 
                "normalized_code_snippet": "Gson gson = new GsonBuilder().setExclusionStrategies(new TestExclStrat(\"in.naishe.test.Country.name\")).create();\nStudent src = new Student();\nString json = gson.toJson(src);"
            }
        ]
    }, 
    {
        "question_id": 4340653, 
        "title": "File path to resource in our war/WEB-INF folder?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "ServletContext context = getContext();\nString fullPath = context.getRealPath(\"/WEB-INF/test/foo.txt\");", 
                "normalized_code_snippet": "ServletContext context = getContext();\nString fullPath = context.getRealPath(\"/WEB-INF/test/foo.txt\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "ServletContext context = getContext();\nURL resourceUrl = context.getResource(\"/WEB-INF/test/foo.txt\");", 
                "normalized_code_snippet": "ServletContext context = getContext();\nURL resourceUrl = context.getResource(\"/WEB-INF/test/foo.txt\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "InputStream resourceContent = context.getResourceAsStream(\"/WEB-INF/test/foo.txt\");", 
                "normalized_code_snippet": "InputStream resourceContent = context.getResourceAsStream(\"/WEB-INF/test/foo.txt\");"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "InputStream resource = getServletContext().getResourceAsStream(\"/WEB-INF/my.json\");", 
                "normalized_code_snippet": "InputStream resource = getServletContext().getResourceAsStream(\"/WEB-INF/my.json\");"
            }
        ]
    }, 
    {
        "question_id": 2369967, 
        "title": "how we check for null array in java", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "if (arr == null) {\n  System.out.println(\"array is null\");\n}", 
                "normalized_code_snippet": "if (arr == null) {\n}"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "ArrayUtils.isNotEmpty(testArrayName)", 
                "normalized_code_snippet": "ArrayUtils.isNotEmpty(testArrayName);"
            }, 
            {
                "intent": "", 
                "context": "int[] i = ...;", 
                "normalized_context": null, 
                "code_snippet": "if (i.length == 0) { }", 
                "normalized_code_snippet": "if (i.length == 0) {\n}"
            }, 
            {
                "intent": "", 
                "context": "int[] i = ...;", 
                "normalized_context": null, 
                "code_snippet": "if (i == null || i.length == 0) { }", 
                "normalized_code_snippet": "if (i == null || i.length == 0) {\n}"
            }
        ]
    }, 
    {
        "question_id": 14676407, 
        "title": "list all files in the folder and also sub folders", 
        "annotations": [
            {
                "intent": "list all files in the folder and also sub folders", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public void listf(String directoryName, ArrayList<File> files) {\n    File directory = new File(directoryName);\n\n    // get all the files from a directory\n    File[] fList = directory.listFiles();\n    for (File file : fList) {\n        if (file.isFile()) {\n            files.add(file);\n        } else if (file.isDirectory()) {\n            listf(file.getAbsolutePath(), files);\n        }\n    }\n}\n", 
                "normalized_code_snippet": "File directory = new File(directoryName);\nFile[] fList = directory.listFiles();\nfor (File file : fList) {\n    if (file.isFile()) {\n        files.add(file);\n    } else if (file.isDirectory()) {\n        listf(file.getAbsolutePath(), files);\n    }\n}"
            }, 
            {
                "intent": "list all files in the folder and also sub folders", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "public static List<File> listf(String directoryName) {\n        File directory = new File(directoryName);\n\n        List<File> resultList = new ArrayList<File>();\n\n        // get all the files from a directory\n        File[] fList = directory.listFiles();\n        resultList.addAll(Arrays.asList(fList));\n        for (File file : fList) {\n            if (file.isFile()) {\n                System.out.println(file.getAbsolutePath());\n            } else if (file.isDirectory()) {\n                resultList.addAll(listf(file.getAbsolutePath()));\n            }\n        }\n        //System.out.println(fList);\n        return resultList;\n    }", 
                "normalized_code_snippet": "File directory = new File(directoryName);\nList<File> resultList = new ArrayList<File>();\nFile[] fList = directory.listFiles();\nresultList.addAll(Arrays.asList(fList));\nfor (File file : fList) {\n    if (file.isFile()) {\n        System.out.println(file.getAbsolutePath());\n    } else if (file.isDirectory()) {\n        resultList.addAll(listf(file.getAbsolutePath()));\n    }\n}"
            }
        ]
    }, 
    {
        "question_id": 2364856, 
        "title": "initializing a boolean array in java", 
        "annotations": [
            {
                "intent": "initializing a boolean array in java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "boolean[] array = new boolean[size];", 
                "normalized_code_snippet": "boolean[] array = new boolean[size];"
            }, 
            {
                "intent": "initializing a boolean array in java", 
                "context": "Boolean[] array = new Boolean[size];", 
                "normalized_context": "Boolean[] array = new Boolean[size];", 
                "code_snippet": "Arrays.fill(array, Boolean.FALSE);", 
                "normalized_code_snippet": "Arrays.fill(array, Boolean.FALSE);"
            }
        ]
    }, 
    {
        "question_id": 5762491, 
        "title": "How to print color in console using System.out.println?", 
        "annotations": [
            {
                "intent": "", 
                "context": "public static final String ANSI_RESET = \"\\u001B[0m\";\npublic static final String ANSI_BLACK = \"\\u001B[30m\";\npublic static final String ANSI_RED = \"\\u001B[31m\";\npublic static final String ANSI_GREEN = \"\\u001B[32m\";\npublic static final String ANSI_YELLOW = \"\\u001B[33m\";\npublic static final String ANSI_BLUE = \"\\u001B[34m\";\npublic static final String ANSI_PURPLE = \"\\u001B[35m\";\npublic static final String ANSI_CYAN = \"\\u001B[36m\";\npublic static final String ANSI_WHITE = \"\\u001B[37m\";", 
                "normalized_context": "public static final String ANSI_RESET = \"\u001b[0m\";\npublic static final String ANSI_BLACK = \"\u001b[30m\";\npublic static final String ANSI_RED = \"\u001b[31m\";\npublic static final String ANSI_GREEN = \"\u001b[32m\";\npublic static final String ANSI_YELLOW = \"\u001b[33m\";\npublic static final String ANSI_BLUE = \"\u001b[34m\";\npublic static final String ANSI_PURPLE = \"\u001b[35m\";\npublic static final String ANSI_CYAN = \"\u001b[36m\";\npublic static final String ANSI_WHITE = \"\u001b[37m\";", 
                "code_snippet": "System.out.println(ANSI_RED + \"This text is red!\" + ANSI_RESET);", 
                "normalized_code_snippet": "System.out.println(ANSI_RED + \"This text is red!\" + ANSI_RESET);"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "print(\"Hello World!\", Attribute.BOLD, FColor.YELLOW, BColor.GREEN);", 
                "normalized_code_snippet": "print(\"Hello World!\", Attribute.BOLD, FColor.YELLOW, BColor.GREEN);"
            }
        ]
    }, 
    {
        "question_id": 1522108, 
        "title": "How to find the index of an element in an array in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "System.out.println(new String(list).indexOf(\"e\"));", 
                "normalized_code_snippet": "System.out.println(new String(list).indexOf(\"e\"));"
            }, 
            {
                "intent": "", 
                "context": "char[] list = {'m', 'e', 'y'};", 
                "normalized_context": "char[] list = { 'm', 'e', 'y' };", 
                "code_snippet": "int index = -1;\n\n    for (int i = 0; (i < list.length) && (index == -1); i++) {\n        if (list[i] == 'e') {\n            index = i;\n        }\n    }", 
                "normalized_code_snippet": "int index = -1;\nfor (int i = 0; (i < list.length) && (index == -1); i++) {\n    if (list[i] == 'e') {\n        index = i;\n    }\n}"
            }, 
            {
                "intent": "", 
                "context": "ArrayList<Character> list = new ArrayList<Character>();\nlist.add('m');\nlist.add('e');\nlist.add('y');", 
                "normalized_context": "ArrayList<Character> list = new ArrayList<Character>();\nlist.add('m');\nlist.add('e');\nlist.add('y');", 
                "code_snippet": "System.out.println(list.indexOf('e'));", 
                "normalized_code_snippet": "System.out.println(list.indexOf('e'));"
            }, 
            {
                "intent": "", 
                "context": "List list = Arrays.asList(new Character[] { 'm', 'e', 'y' });", 
                "normalized_context": "List list = Arrays.asList(new Character[] { 'm', 'e', 'y' });", 
                "code_snippet": "System.out.println(list.indexOf('e'));", 
                "normalized_code_snippet": "System.out.println(list.indexOf('e'));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "for (int i = 0; i < list.length; i++) {\n  if (list[i] == 'e') {\n    System.out.println(i);\n    break;\n  }\n}", 
                "normalized_code_snippet": "for (int i = 0; i < list.length; i++) {\n    if (list[i] == 'e') {\n        System.out.println(i);\n        break;\n    }\n}"
            }
        ]
    }, 
    {
        "question_id": 960431, 
        "title": "How to convert List<Integer> to int[] in Java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "int[] array = list.stream().mapToInt(i->i).toArray();", 
                "normalized_code_snippet": "int[] array = list.stream().mapToInt(i -> i).toArray();"
            }, 
            {
                "intent": "", 
                "context": "List<Integer> list = ...", 
                "normalized_context": null, 
                "code_snippet": "int[] ints = Ints.toArray(list);", 
                "normalized_code_snippet": "int[] ints = Ints.toArray(list);"
            }, 
            {
                "intent": "", 
                "context": "List<Integer> myList;\n ... assign and fill the list", 
                "normalized_context": null, 
                "code_snippet": "int[] intArray = ArrayUtils.toPrimitive(myList.toArray(new Integer[myList.size()]));", 
                "normalized_code_snippet": "int[] intArray = ArrayUtils.toPrimitive(myList.toArray(new Integer[myList.size()]));"
            }, 
            {
                "intent": "", 
                "context": "static final Integer[] NO_INTS = new Integer[0];\n   ....", 
                "normalized_context": null, 
                "code_snippet": "int[] intArray2 = ArrayUtils.toPrimitive(myList.toArray(NO_INTS));", 
                "normalized_code_snippet": "int[] intArray2 = ArrayUtils.toPrimitive(myList.toArray(NO_INTS));"
            }
        ]
    }, 
    {
        "question_id": 20363719, 
        "title": "Java 8 List<V> into Map<K, V>", 
        "annotations": [
            {
                "intent": "Java 8 List<V> into Map<K, V>", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Map<String, Choice> result =\n    choices.stream().collect(Collectors.toMap(Choice::getName,\n                                              Function.identity()));", 
                "normalized_code_snippet": "Map<String, Choice> result = choices.stream().collect(Collectors.toMap(Choice::getName, Function.identity()));"
            }, 
            {
                "intent": "Java 8 List<V> into Map<K, V>", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Map<String, List<Choice>> result =\n choices.stream().collect(Collectors.groupingBy(Choice::getName));", 
                "normalized_code_snippet": "Map<String, List<Choice>> result = choices.stream().collect(Collectors.groupingBy(Choice::getName));"
            }, 
            {
                "intent": "Java 8 List<V> into Map<K, V>", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Map<String, Choice> result =\n    choices.stream().collect(Collectors.toMap(Choice::getName, c -> c));", 
                "normalized_code_snippet": "Map<String, Choice> result = choices.stream().collect(Collectors.toMap(Choice::getName, c -> c));"
            }
        ]
    }, 
    {
        "question_id": 9581530, 
        "title": "Converting from byte to int in java", 
        "annotations": [
            {
                "intent": "Converting from byte to int in java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "int i=rno[0];", 
                "normalized_code_snippet": "int i = rno[0];"
            }, 
            {
                "intent": "Converting from byte to int in java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Byte b = rno[0]; // Boxing conversion converts `byte` to `Byte`\nint i = b.intValue();", 
                "normalized_code_snippet": "Byte b = rno[0];\nint i = b.intValue();"
            }, 
            {
                "intent": "Converting from byte to int in java", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "Byte b = new Byte(rno[0]);\nint i = b.intValue();", 
                "normalized_code_snippet": "Byte b = new Byte(rno[0]);\nint i = b.intValue();"
            }, 
            {
                "intent": "Converting from byte to int in java", 
                "context": "byte b = (byte)0xC8;", 
                "normalized_context": "byte b = (byte) 0xC8;", 
                "code_snippet": "int v1 = b;       // v1 is -56 (0xFFFFFFC8)", 
                "normalized_code_snippet": "int v1 = b;"
            }
        ]
    }, 
    {
        "question_id": 9102318, 
        "title": "Cast Double to Integer in Java", 
        "annotations": [
            {
                "intent": "Cast Double to Integer in Java", 
                "context": "double d = 5.25;", 
                "normalized_context": "double d = 5.25;", 
                "code_snippet": "int i = (int) d;", 
                "normalized_code_snippet": "int i = (int) d;"
            }, 
            {
                "intent": "Cast Double to Integer in Java", 
                "context": "double d = 5.25;", 
                "normalized_context": "double d = 5.25;", 
                "code_snippet": "int i = (int) d;", 
                "normalized_code_snippet": "int i = (int) d;"
            }, 
            {
                "intent": "Cast Double to Integer in Java", 
                "context": "double d = 9.5;", 
                "normalized_context": "double d = 9.5;", 
                "code_snippet": "int i = (int)d;", 
                "normalized_code_snippet": "int i = (int) d;"
            }, 
            {
                "intent": "Cast Double to Integer in Java", 
                "context": "Double D = 9.5;", 
                "normalized_context": "Double D = 9.5;", 
                "code_snippet": "int i = Integer.valueOf(D.intValue());", 
                "normalized_code_snippet": "int i = Integer.valueOf(D.intValue());"
            }, 
            {
                "intent": "Cast Double to Integer in Java", 
                "context": "double d = 9.5;", 
                "normalized_context": "double d = 9.5;", 
                "code_snippet": "Long L = Math.round(d);\nint i = Integer.valueOf(L.intValue());", 
                "normalized_code_snippet": "Long L = Math.round(d);\nint i = Integer.valueOf(L.intValue());"
            }
        ]
    }, 
    {
        "question_id": 3402735, 
        "title": "What is simplest way to read a file into String?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "String content = new Scanner(new File(\"filename\")).useDelimiter(\"\\\\Z\").next();", 
                "normalized_code_snippet": "String content = new Scanner(new File(\"filename\")).useDelimiter(\"\\\\Z\").next();"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "new String(Files.readAllBytes(Paths.get(filePath)));", 
                "normalized_code_snippet": "new String(Files.readAllBytes(Paths.get(filePath)));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "FileInputStream fisTargetFile = new FileInputStream(new File(\"test.txt\"));\n\nString targetFileStr = IOUtils.toString(fisTargetFile, \"UTF-8\");", 
                "normalized_code_snippet": "FileInputStream fisTargetFile = new FileInputStream(new File(\"test.txt\"));\nString targetFileStr = IOUtils.toString(fisTargetFile, \"UTF-8\");"
            }
        ]
    }, 
    {
        "question_id": 8559092, 
        "title": "Create an Array of Arraylists", 
        "annotations": [
            {
                "intent": "Create an Array of Arraylists", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "ArrayList<ArrayList<Individual>> group = new ArrayList<ArrayList<Individual>>(4);", 
                "normalized_code_snippet": "ArrayList<ArrayList<Individual>> group = new ArrayList<ArrayList<Individual>>(4);"
            }, 
            {
                "intent": "Create an Array of Arraylists", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "List<List<Individual>> group = new ArrayList<List<Individual>>(4);", 
                "normalized_code_snippet": "List<List<Individual>> group = new ArrayList<List<Individual>>(4);"
            }, 
            {
                "intent": "Create an Array of Arraylists", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "ArrayList<Individual>[] group = (ArrayList<Individual>[])new ArrayList[4];", 
                "normalized_code_snippet": "ArrayList<Individual>[] group = (ArrayList<Individual>[]) new ArrayList[4];"
            }, 
            {
                "intent": "Create an Array of Arraylists", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "ArrayList<String>[] group = new ArrayList[4];", 
                "normalized_code_snippet": "ArrayList<String>[] group = new ArrayList[4];"
            }
        ]
    }, 
    {
        "question_id": 2310139, 
        "title": "How to read XML response from a URL in java?", 
        "annotations": [
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));", 
                "normalized_code_snippet": "XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument doc = db.parse(new URL(url).openStream());", 
                "normalized_code_snippet": "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument doc = db.parse(new URL(url).openStream());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "URL url = new URL(urlString);\nURLConnection conn = url.openConnection();\n\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());", 
                "normalized_code_snippet": "URL url = new URL(urlString);\nURLConnection conn = url.openConnection();\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nDocumentBuilder builder = factory.newDocumentBuilder();\nDocument doc = builder.parse(conn.getInputStream());"
            }, 
            {
                "intent": "", 
                "context": "", 
                "normalized_context": null, 
                "code_snippet": "XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));", 
                "normalized_code_snippet": "XMLReader myReader = XMLReaderFactory.createXMLReader();\nmyReader.setContentHandler(handler);\nmyReader.parse(new InputSource(new URL(url).openStream()));"
            }
        ]
    }
]
